
foundation_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  000014f2  00001586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  0080021e  0080021e  000015a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018c5  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e71  00000000  00000000  00002f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0e  00000000  00000000  00003e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  00004918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000994  00000000  00000000  00004c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e7e  00000000  00000000  000055f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00006476  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	99 c0       	rjmp	.+306    	; 0x138 <__vector_1>
       6:	00 00       	nop
       8:	d2 c0       	rjmp	.+420    	; 0x1ae <__vector_2>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	ef c0       	rjmp	.+478    	; 0x224 <__vector_17>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	03 c2       	rjmp	.+1030   	; 0x45c <__vector_21>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ef       	ldi	r30, 0xF2	; 242
      fc:	f4 e1       	ldi	r31, 0x14	; 20
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 31       	cpi	r26, 0x1E	; 30
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	ae e1       	ldi	r26, 0x1E	; 30
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a7 36       	cpi	r26, 0x67	; 103
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	ff d4       	rcall	.+2558   	; 0xb1e <main>
     120:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <setMotorSpeed>:

float calculate_distance_traveled(int encoderCount) {
	float revolutions = (float)encoderCount / COUNTS_PER_REVOLUTION;
	float circumference = 2 * M_PI * WHEEL_RADIUS;
	return revolutions * circumference;
}
     126:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     12a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     12e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
     132:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
     136:	08 95       	ret

00000138 <__vector_1>:
     138:	1f 92       	push	r1
     13a:	0f 92       	push	r0
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	0f 92       	push	r0
     140:	11 24       	eor	r1, r1
     142:	8f 93       	push	r24
     144:	9f 93       	push	r25
     146:	af 93       	push	r26
     148:	bf 93       	push	r27
     14a:	4f 9b       	sbis	0x09, 7	; 9
     14c:	14 c0       	rjmp	.+40     	; 0x176 <__vector_1+0x3e>
     14e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <leftEncoderCount>
     152:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <leftEncoderCount+0x1>
     156:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <leftEncoderCount+0x2>
     15a:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <leftEncoderCount+0x3>
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	a1 09       	sbc	r26, r1
     162:	b1 09       	sbc	r27, r1
     164:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <leftEncoderCount>
     168:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <leftEncoderCount+0x1>
     16c:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <leftEncoderCount+0x2>
     170:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <leftEncoderCount+0x3>
     174:	13 c0       	rjmp	.+38     	; 0x19c <__vector_1+0x64>
     176:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <leftEncoderCount>
     17a:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <leftEncoderCount+0x1>
     17e:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <leftEncoderCount+0x2>
     182:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <leftEncoderCount+0x3>
     186:	01 96       	adiw	r24, 0x01	; 1
     188:	a1 1d       	adc	r26, r1
     18a:	b1 1d       	adc	r27, r1
     18c:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <leftEncoderCount>
     190:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <leftEncoderCount+0x1>
     194:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <leftEncoderCount+0x2>
     198:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <leftEncoderCount+0x3>
     19c:	bf 91       	pop	r27
     19e:	af 91       	pop	r26
     1a0:	9f 91       	pop	r25
     1a2:	8f 91       	pop	r24
     1a4:	0f 90       	pop	r0
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	0f 90       	pop	r0
     1aa:	1f 90       	pop	r1
     1ac:	18 95       	reti

000001ae <__vector_2>:
     1ae:	1f 92       	push	r1
     1b0:	0f 92       	push	r0
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	0f 92       	push	r0
     1b6:	11 24       	eor	r1, r1
     1b8:	8f 93       	push	r24
     1ba:	9f 93       	push	r25
     1bc:	af 93       	push	r26
     1be:	bf 93       	push	r27
     1c0:	4e 9b       	sbis	0x09, 6	; 9
     1c2:	14 c0       	rjmp	.+40     	; 0x1ec <__vector_2+0x3e>
     1c4:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <rightEncoderCount>
     1c8:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <rightEncoderCount+0x1>
     1cc:	a0 91 4a 02 	lds	r26, 0x024A	; 0x80024a <rightEncoderCount+0x2>
     1d0:	b0 91 4b 02 	lds	r27, 0x024B	; 0x80024b <rightEncoderCount+0x3>
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	a1 09       	sbc	r26, r1
     1d8:	b1 09       	sbc	r27, r1
     1da:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <rightEncoderCount>
     1de:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <rightEncoderCount+0x1>
     1e2:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <rightEncoderCount+0x2>
     1e6:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <rightEncoderCount+0x3>
     1ea:	13 c0       	rjmp	.+38     	; 0x212 <__vector_2+0x64>
     1ec:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <rightEncoderCount>
     1f0:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <rightEncoderCount+0x1>
     1f4:	a0 91 4a 02 	lds	r26, 0x024A	; 0x80024a <rightEncoderCount+0x2>
     1f8:	b0 91 4b 02 	lds	r27, 0x024B	; 0x80024b <rightEncoderCount+0x3>
     1fc:	01 96       	adiw	r24, 0x01	; 1
     1fe:	a1 1d       	adc	r26, r1
     200:	b1 1d       	adc	r27, r1
     202:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <rightEncoderCount>
     206:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <rightEncoderCount+0x1>
     20a:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <rightEncoderCount+0x2>
     20e:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <rightEncoderCount+0x3>
     212:	bf 91       	pop	r27
     214:	af 91       	pop	r26
     216:	9f 91       	pop	r25
     218:	8f 91       	pop	r24
     21a:	0f 90       	pop	r0
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	0f 90       	pop	r0
     220:	1f 90       	pop	r1
     222:	18 95       	reti

00000224 <__vector_17>:
     224:	1f 92       	push	r1
     226:	0f 92       	push	r0
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	0f 92       	push	r0
     22c:	11 24       	eor	r1, r1
     22e:	0b b6       	in	r0, 0x3b	; 59
     230:	0f 92       	push	r0
     232:	8f 92       	push	r8
     234:	9f 92       	push	r9
     236:	af 92       	push	r10
     238:	bf 92       	push	r11
     23a:	cf 92       	push	r12
     23c:	df 92       	push	r13
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	2f 93       	push	r18
     244:	3f 93       	push	r19
     246:	4f 93       	push	r20
     248:	5f 93       	push	r21
     24a:	6f 93       	push	r22
     24c:	7f 93       	push	r23
     24e:	8f 93       	push	r24
     250:	9f 93       	push	r25
     252:	af 93       	push	r26
     254:	bf 93       	push	r27
     256:	ef 93       	push	r30
     258:	ff 93       	push	r31
     25a:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <leftEncoderCount>
     25e:	70 91 4d 02 	lds	r23, 0x024D	; 0x80024d <leftEncoderCount+0x1>
     262:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <leftEncoderCount+0x2>
     266:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <leftEncoderCount+0x3>
     26a:	c0 90 2c 02 	lds	r12, 0x022C	; 0x80022c <leftEncoderCountPrev>
     26e:	d0 90 2d 02 	lds	r13, 0x022D	; 0x80022d <leftEncoderCountPrev+0x1>
     272:	e0 90 2e 02 	lds	r14, 0x022E	; 0x80022e <leftEncoderCountPrev+0x2>
     276:	f0 90 2f 02 	lds	r15, 0x022F	; 0x80022f <leftEncoderCountPrev+0x3>
     27a:	cb d7       	rcall	.+3990   	; 0x1212 <__floatsisf>
     27c:	a7 01       	movw	r20, r14
     27e:	96 01       	movw	r18, r12
     280:	c4 d6       	rcall	.+3464   	; 0x100a <__subsf3>
     282:	94 d7       	rcall	.+3880   	; 0x11ac <__fixsfsi>
     284:	4b 01       	movw	r8, r22
     286:	5c 01       	movw	r10, r24
     288:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <rightEncoderCount>
     28c:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <rightEncoderCount+0x1>
     290:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <rightEncoderCount+0x2>
     294:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <rightEncoderCount+0x3>
     298:	c0 90 28 02 	lds	r12, 0x0228	; 0x800228 <rightEncoderCountPrev>
     29c:	d0 90 29 02 	lds	r13, 0x0229	; 0x800229 <rightEncoderCountPrev+0x1>
     2a0:	e0 90 2a 02 	lds	r14, 0x022A	; 0x80022a <rightEncoderCountPrev+0x2>
     2a4:	f0 90 2b 02 	lds	r15, 0x022B	; 0x80022b <rightEncoderCountPrev+0x3>
     2a8:	b4 d7       	rcall	.+3944   	; 0x1212 <__floatsisf>
     2aa:	a7 01       	movw	r20, r14
     2ac:	96 01       	movw	r18, r12
     2ae:	ad d6       	rcall	.+3418   	; 0x100a <__subsf3>
     2b0:	7d d7       	rcall	.+3834   	; 0x11ac <__fixsfsi>
     2b2:	6b 01       	movw	r12, r22
     2b4:	7c 01       	movw	r14, r24
     2b6:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <leftEncoderCount>
     2ba:	70 91 4d 02 	lds	r23, 0x024D	; 0x80024d <leftEncoderCount+0x1>
     2be:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <leftEncoderCount+0x2>
     2c2:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <leftEncoderCount+0x3>
     2c6:	a5 d7       	rcall	.+3914   	; 0x1212 <__floatsisf>
     2c8:	60 93 2c 02 	sts	0x022C, r22	; 0x80022c <leftEncoderCountPrev>
     2cc:	70 93 2d 02 	sts	0x022D, r23	; 0x80022d <leftEncoderCountPrev+0x1>
     2d0:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <leftEncoderCountPrev+0x2>
     2d4:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <leftEncoderCountPrev+0x3>
     2d8:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <rightEncoderCount>
     2dc:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <rightEncoderCount+0x1>
     2e0:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <rightEncoderCount+0x2>
     2e4:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <rightEncoderCount+0x3>
     2e8:	94 d7       	rcall	.+3880   	; 0x1212 <__floatsisf>
     2ea:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <rightEncoderCountPrev>
     2ee:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <rightEncoderCountPrev+0x1>
     2f2:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <rightEncoderCountPrev+0x2>
     2f6:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <rightEncoderCountPrev+0x3>
     2fa:	b4 01       	movw	r22, r8
     2fc:	99 0c       	add	r9, r9
     2fe:	88 0b       	sbc	r24, r24
     300:	99 0b       	sbc	r25, r25
     302:	87 d7       	rcall	.+3854   	; 0x1212 <__floatsisf>
     304:	2d ec       	ldi	r18, 0xCD	; 205
     306:	3c ec       	ldi	r19, 0xCC	; 204
     308:	4c ec       	ldi	r20, 0xCC	; 204
     30a:	5d e3       	ldi	r21, 0x3D	; 61
     30c:	e7 d6       	rcall	.+3534   	; 0x10dc <__divsf3>
     30e:	4b 01       	movw	r8, r22
     310:	5c 01       	movw	r10, r24
     312:	b6 01       	movw	r22, r12
     314:	dd 0c       	add	r13, r13
     316:	88 0b       	sbc	r24, r24
     318:	99 0b       	sbc	r25, r25
     31a:	7b d7       	rcall	.+3830   	; 0x1212 <__floatsisf>
     31c:	2d ec       	ldi	r18, 0xCD	; 205
     31e:	3c ec       	ldi	r19, 0xCC	; 204
     320:	4c ec       	ldi	r20, 0xCC	; 204
     322:	5d e3       	ldi	r21, 0x3D	; 61
     324:	db d6       	rcall	.+3510   	; 0x10dc <__divsf3>
     326:	6b 01       	movw	r12, r22
     328:	7c 01       	movw	r14, r24
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e8       	ldi	r19, 0x80	; 128
     32e:	4c e2       	ldi	r20, 0x2C	; 44
     330:	54 e4       	ldi	r21, 0x44	; 68
     332:	c5 01       	movw	r24, r10
     334:	b4 01       	movw	r22, r8
     336:	d2 d6       	rcall	.+3492   	; 0x10dc <__divsf3>
     338:	9b 01       	movw	r18, r22
     33a:	ac 01       	movw	r20, r24
     33c:	67 d6       	rcall	.+3278   	; 0x100c <__addsf3>
     33e:	27 e8       	ldi	r18, 0x87	; 135
     340:	36 e1       	ldi	r19, 0x16	; 22
     342:	49 e4       	ldi	r20, 0x49	; 73
     344:	50 e4       	ldi	r21, 0x40	; 64
     346:	0e 94 bd 09 	call	0x137a	; 0x137a <__mulsf3>
     34a:	2f e8       	ldi	r18, 0x8F	; 143
     34c:	32 ec       	ldi	r19, 0xC2	; 194
     34e:	45 ef       	ldi	r20, 0xF5	; 245
     350:	5c e3       	ldi	r21, 0x3C	; 60
     352:	0e 94 bd 09 	call	0x137a	; 0x137a <__mulsf3>
     356:	4b 01       	movw	r8, r22
     358:	5c 01       	movw	r10, r24
     35a:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <leftSpeedMPS>
     35e:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <leftSpeedMPS+0x1>
     362:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <leftSpeedMPS+0x2>
     366:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <leftSpeedMPS+0x3>
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e8       	ldi	r19, 0x80	; 128
     36e:	4c e2       	ldi	r20, 0x2C	; 44
     370:	54 e4       	ldi	r21, 0x44	; 68
     372:	c7 01       	movw	r24, r14
     374:	b6 01       	movw	r22, r12
     376:	b2 d6       	rcall	.+3428   	; 0x10dc <__divsf3>
     378:	9b 01       	movw	r18, r22
     37a:	ac 01       	movw	r20, r24
     37c:	47 d6       	rcall	.+3214   	; 0x100c <__addsf3>
     37e:	27 e8       	ldi	r18, 0x87	; 135
     380:	36 e1       	ldi	r19, 0x16	; 22
     382:	49 e4       	ldi	r20, 0x49	; 73
     384:	50 e4       	ldi	r21, 0x40	; 64
     386:	f9 d7       	rcall	.+4082   	; 0x137a <__mulsf3>
     388:	2f e8       	ldi	r18, 0x8F	; 143
     38a:	32 ec       	ldi	r19, 0xC2	; 194
     38c:	45 ef       	ldi	r20, 0xF5	; 245
     38e:	5c e3       	ldi	r21, 0x3C	; 60
     390:	f4 d7       	rcall	.+4072   	; 0x137a <__mulsf3>
     392:	6b 01       	movw	r12, r22
     394:	7c 01       	movw	r14, r24
     396:	60 93 40 02 	sts	0x0240, r22	; 0x800240 <rightSpeedMPS>
     39a:	70 93 41 02 	sts	0x0241, r23	; 0x800241 <rightSpeedMPS+0x1>
     39e:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <rightSpeedMPS+0x2>
     3a2:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <rightSpeedMPS+0x3>
     3a6:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <leftSpeedPrev>
     3aa:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <leftSpeedPrev+0x1>
     3ae:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <leftSpeedPrev+0x2>
     3b2:	50 91 37 02 	lds	r21, 0x0237	; 0x800237 <leftSpeedPrev+0x3>
     3b6:	c5 01       	movw	r24, r10
     3b8:	b4 01       	movw	r22, r8
     3ba:	27 d6       	rcall	.+3150   	; 0x100a <__subsf3>
     3bc:	2d ec       	ldi	r18, 0xCD	; 205
     3be:	3c ec       	ldi	r19, 0xCC	; 204
     3c0:	4c ec       	ldi	r20, 0xCC	; 204
     3c2:	5d e3       	ldi	r21, 0x3D	; 61
     3c4:	8b d6       	rcall	.+3350   	; 0x10dc <__divsf3>
     3c6:	60 93 3c 02 	sts	0x023C, r22	; 0x80023c <leftAccelerationMPS2>
     3ca:	70 93 3d 02 	sts	0x023D, r23	; 0x80023d <leftAccelerationMPS2+0x1>
     3ce:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <leftAccelerationMPS2+0x2>
     3d2:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <leftAccelerationMPS2+0x3>
     3d6:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <rightSpeedPrev>
     3da:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <rightSpeedPrev+0x1>
     3de:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <rightSpeedPrev+0x2>
     3e2:	50 91 33 02 	lds	r21, 0x0233	; 0x800233 <rightSpeedPrev+0x3>
     3e6:	c7 01       	movw	r24, r14
     3e8:	b6 01       	movw	r22, r12
     3ea:	0f d6       	rcall	.+3102   	; 0x100a <__subsf3>
     3ec:	2d ec       	ldi	r18, 0xCD	; 205
     3ee:	3c ec       	ldi	r19, 0xCC	; 204
     3f0:	4c ec       	ldi	r20, 0xCC	; 204
     3f2:	5d e3       	ldi	r21, 0x3D	; 61
     3f4:	73 d6       	rcall	.+3302   	; 0x10dc <__divsf3>
     3f6:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <rightAccelerationMPS2>
     3fa:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <rightAccelerationMPS2+0x1>
     3fe:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <rightAccelerationMPS2+0x2>
     402:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <rightAccelerationMPS2+0x3>
     406:	80 92 34 02 	sts	0x0234, r8	; 0x800234 <leftSpeedPrev>
     40a:	90 92 35 02 	sts	0x0235, r9	; 0x800235 <leftSpeedPrev+0x1>
     40e:	a0 92 36 02 	sts	0x0236, r10	; 0x800236 <leftSpeedPrev+0x2>
     412:	b0 92 37 02 	sts	0x0237, r11	; 0x800237 <leftSpeedPrev+0x3>
     416:	c0 92 30 02 	sts	0x0230, r12	; 0x800230 <rightSpeedPrev>
     41a:	d0 92 31 02 	sts	0x0231, r13	; 0x800231 <rightSpeedPrev+0x1>
     41e:	e0 92 32 02 	sts	0x0232, r14	; 0x800232 <rightSpeedPrev+0x2>
     422:	f0 92 33 02 	sts	0x0233, r15	; 0x800233 <rightSpeedPrev+0x3>
     426:	ff 91       	pop	r31
     428:	ef 91       	pop	r30
     42a:	bf 91       	pop	r27
     42c:	af 91       	pop	r26
     42e:	9f 91       	pop	r25
     430:	8f 91       	pop	r24
     432:	7f 91       	pop	r23
     434:	6f 91       	pop	r22
     436:	5f 91       	pop	r21
     438:	4f 91       	pop	r20
     43a:	3f 91       	pop	r19
     43c:	2f 91       	pop	r18
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	cf 90       	pop	r12
     446:	bf 90       	pop	r11
     448:	af 90       	pop	r10
     44a:	9f 90       	pop	r9
     44c:	8f 90       	pop	r8
     44e:	0f 90       	pop	r0
     450:	0b be       	out	0x3b, r0	; 59
     452:	0f 90       	pop	r0
     454:	0f be       	out	0x3f, r0	; 63
     456:	0f 90       	pop	r0
     458:	1f 90       	pop	r1
     45a:	18 95       	reti

0000045c <__vector_21>:
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	8f 93       	push	r24
     468:	9f 93       	push	r25
     46a:	af 93       	push	r26
     46c:	bf 93       	push	r27
     46e:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
     472:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
     476:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <__data_end+0x2>
     47a:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <__data_end+0x3>
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	a1 1d       	adc	r26, r1
     482:	b1 1d       	adc	r27, r1
     484:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
     488:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
     48c:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <__data_end+0x2>
     490:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <__data_end+0x3>
     494:	bf 91       	pop	r27
     496:	af 91       	pop	r26
     498:	9f 91       	pop	r25
     49a:	8f 91       	pop	r24
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <init_timer>:
     4a6:	e1 e8       	ldi	r30, 0x81	; 129
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	88 60       	ori	r24, 0x08	; 8
     4ae:	80 83       	st	Z, r24
     4b0:	af e6       	ldi	r26, 0x6F	; 111
     4b2:	b0 e0       	ldi	r27, 0x00	; 0
     4b4:	8c 91       	ld	r24, X
     4b6:	82 60       	ori	r24, 0x02	; 2
     4b8:	8c 93       	st	X, r24
     4ba:	87 ea       	ldi	r24, 0xA7	; 167
     4bc:	91 e6       	ldi	r25, 0x61	; 97
     4be:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     4c2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     4c6:	80 81       	ld	r24, Z
     4c8:	83 60       	ori	r24, 0x03	; 3
     4ca:	80 83       	st	Z, r24
     4cc:	84 b5       	in	r24, 0x24	; 36
     4ce:	82 60       	ori	r24, 0x02	; 2
     4d0:	84 bd       	out	0x24, r24	; 36
     4d2:	89 ef       	ldi	r24, 0xF9	; 249
     4d4:	87 bd       	out	0x27, r24	; 39
     4d6:	ee e6       	ldi	r30, 0x6E	; 110
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	80 81       	ld	r24, Z
     4dc:	82 60       	ori	r24, 0x02	; 2
     4de:	80 83       	st	Z, r24
     4e0:	85 b5       	in	r24, 0x25	; 37
     4e2:	83 60       	ori	r24, 0x03	; 3
     4e4:	85 bd       	out	0x25, r24	; 37
     4e6:	08 95       	ret

000004e8 <millis>:
     4e8:	f8 94       	cli
     4ea:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <__data_end>
     4ee:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <__data_end+0x1>
     4f2:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end+0x2>
     4f6:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <__data_end+0x3>
     4fa:	78 94       	sei
     4fc:	08 95       	ret

000004fe <_delay_ms>:
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ec 01       	movw	r28, r24
     510:	eb df       	rcall	.-42     	; 0x4e8 <millis>
     512:	6b 01       	movw	r12, r22
     514:	7c 01       	movw	r14, r24
     516:	e8 df       	rcall	.-48     	; 0x4e8 <millis>
     518:	dc 01       	movw	r26, r24
     51a:	cb 01       	movw	r24, r22
     51c:	8c 19       	sub	r24, r12
     51e:	9d 09       	sbc	r25, r13
     520:	ae 09       	sbc	r26, r14
     522:	bf 09       	sbc	r27, r15
     524:	8e 01       	movw	r16, r28
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	80 17       	cp	r24, r16
     52c:	91 07       	cpc	r25, r17
     52e:	a2 07       	cpc	r26, r18
     530:	b3 07       	cpc	r27, r19
     532:	88 f3       	brcs	.-30     	; 0x516 <_delay_ms+0x18>
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	1f 91       	pop	r17
     53a:	0f 91       	pop	r16
     53c:	ff 90       	pop	r15
     53e:	ef 90       	pop	r14
     540:	df 90       	pop	r13
     542:	cf 90       	pop	r12
     544:	08 95       	ret

00000546 <turnBend>:
     546:	cf 92       	push	r12
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	28 2f       	mov	r18, r24
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	a8 ec       	ldi	r26, 0xC8	; 200
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	8e d7       	rcall	.+3868   	; 0x1478 <__umulhisi3>
     55c:	2a e5       	ldi	r18, 0x5A	; 90
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	40 e0       	ldi	r20, 0x00	; 0
     562:	50 e0       	ldi	r21, 0x00	; 0
     564:	6d d7       	rcall	.+3802   	; 0x1440 <__divmodsi4>
     566:	69 01       	movw	r12, r18
     568:	7a 01       	movw	r14, r20
     56a:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <leftEncoderCount>
     56e:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <leftEncoderCount+0x1>
     572:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <leftEncoderCount+0x2>
     576:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <leftEncoderCount+0x3>
     57a:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <rightEncoderCount>
     57e:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <rightEncoderCount+0x1>
     582:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <rightEncoderCount+0x2>
     586:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <rightEncoderCount+0x3>
     58a:	c0 e0       	ldi	r28, 0x00	; 0
     58c:	d0 e0       	ldi	r29, 0x00	; 0
     58e:	19 c0       	rjmp	.+50     	; 0x5c2 <turnBend+0x7c>
     590:	22 96       	adiw	r28, 0x02	; 2
     592:	be 01       	movw	r22, r28
     594:	0d 2e       	mov	r0, r29
     596:	00 0c       	add	r0, r0
     598:	88 0b       	sbc	r24, r24
     59a:	99 0b       	sbc	r25, r25
     59c:	3a d6       	rcall	.+3188   	; 0x1212 <__floatsisf>
     59e:	22 e5       	ldi	r18, 0x52	; 82
     5a0:	37 e7       	ldi	r19, 0x77	; 119
     5a2:	43 e4       	ldi	r20, 0x43	; 67
     5a4:	59 e3       	ldi	r21, 0x39	; 57
     5a6:	e5 d6       	rcall	.+3530   	; 0x1372 <__gesf2>
     5a8:	18 16       	cp	r1, r24
     5aa:	14 f4       	brge	.+4      	; 0x5b0 <turnBend+0x6a>
     5ac:	c0 e0       	ldi	r28, 0x00	; 0
     5ae:	d0 e0       	ldi	r29, 0x00	; 0
     5b0:	66 27       	eor	r22, r22
     5b2:	77 27       	eor	r23, r23
     5b4:	6c 1b       	sub	r22, r28
     5b6:	7d 0b       	sbc	r23, r29
     5b8:	ce 01       	movw	r24, r28
     5ba:	b5 dd       	rcall	.-1174   	; 0x126 <setMotorSpeed>
     5bc:	82 e3       	ldi	r24, 0x32	; 50
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	9e df       	rcall	.-196    	; 0x4fe <_delay_ms>
     5c2:	be 01       	movw	r22, r28
     5c4:	0d 2e       	mov	r0, r29
     5c6:	00 0c       	add	r0, r0
     5c8:	88 0b       	sbc	r24, r24
     5ca:	99 0b       	sbc	r25, r25
     5cc:	22 d6       	rcall	.+3140   	; 0x1212 <__floatsisf>
     5ce:	22 e5       	ldi	r18, 0x52	; 82
     5d0:	37 e7       	ldi	r19, 0x77	; 119
     5d2:	43 e4       	ldi	r20, 0x43	; 67
     5d4:	59 e3       	ldi	r21, 0x39	; 57
     5d6:	7e d5       	rcall	.+2812   	; 0x10d4 <__cmpsf2>
     5d8:	88 23       	and	r24, r24
     5da:	d4 f2       	brlt	.-76     	; 0x590 <turnBend+0x4a>
     5dc:	d7 01       	movw	r26, r14
     5de:	c6 01       	movw	r24, r12
     5e0:	99 27       	eor	r25, r25
     5e2:	aa 27       	eor	r26, r26
     5e4:	bb 27       	eor	r27, r27
     5e6:	40 91 4c 02 	lds	r20, 0x024C	; 0x80024c <leftEncoderCount>
     5ea:	50 91 4d 02 	lds	r21, 0x024D	; 0x80024d <leftEncoderCount+0x1>
     5ee:	60 91 4e 02 	lds	r22, 0x024E	; 0x80024e <leftEncoderCount+0x2>
     5f2:	70 91 4f 02 	lds	r23, 0x024F	; 0x80024f <leftEncoderCount+0x3>
     5f6:	48 17       	cp	r20, r24
     5f8:	59 07       	cpc	r21, r25
     5fa:	6a 07       	cpc	r22, r26
     5fc:	7b 07       	cpc	r23, r27
     5fe:	dc f4       	brge	.+54     	; 0x636 <turnBend+0xf0>
     600:	40 91 48 02 	lds	r20, 0x0248	; 0x800248 <rightEncoderCount>
     604:	50 91 49 02 	lds	r21, 0x0249	; 0x800249 <rightEncoderCount+0x1>
     608:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <rightEncoderCount+0x2>
     60c:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <rightEncoderCount+0x3>
     610:	48 17       	cp	r20, r24
     612:	59 07       	cpc	r21, r25
     614:	6a 07       	cpc	r22, r26
     616:	7b 07       	cpc	r23, r27
     618:	0c f3       	brlt	.-62     	; 0x5dc <turnBend+0x96>
     61a:	0d c0       	rjmp	.+26     	; 0x636 <turnBend+0xf0>
     61c:	22 97       	sbiw	r28, 0x02	; 2
     61e:	12 f4       	brpl	.+4      	; 0x624 <turnBend+0xde>
     620:	c0 e0       	ldi	r28, 0x00	; 0
     622:	d0 e0       	ldi	r29, 0x00	; 0
     624:	66 27       	eor	r22, r22
     626:	77 27       	eor	r23, r23
     628:	6c 1b       	sub	r22, r28
     62a:	7d 0b       	sbc	r23, r29
     62c:	ce 01       	movw	r24, r28
     62e:	7b dd       	rcall	.-1290   	; 0x126 <setMotorSpeed>
     630:	82 e3       	ldi	r24, 0x32	; 50
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	64 df       	rcall	.-312    	; 0x4fe <_delay_ms>
     636:	1c 16       	cp	r1, r28
     638:	1d 06       	cpc	r1, r29
     63a:	84 f3       	brlt	.-32     	; 0x61c <turnBend+0xd6>
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	70 dd       	rcall	.-1312   	; 0x126 <setMotorSpeed>
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	df 90       	pop	r13
     650:	cf 90       	pop	r12
     652:	08 95       	ret

00000654 <_delay_us>:
     654:	cf 92       	push	r12
     656:	df 92       	push	r13
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	ec 01       	movw	r28, r24
     666:	40 df       	rcall	.-384    	; 0x4e8 <millis>
     668:	9b 01       	movw	r18, r22
     66a:	ac 01       	movw	r20, r24
     66c:	a8 ee       	ldi	r26, 0xE8	; 232
     66e:	b3 e0       	ldi	r27, 0x03	; 3
     670:	12 d7       	rcall	.+3620   	; 0x1496 <__muluhisi3>
     672:	6b 01       	movw	r12, r22
     674:	7c 01       	movw	r14, r24
     676:	38 df       	rcall	.-400    	; 0x4e8 <millis>
     678:	9b 01       	movw	r18, r22
     67a:	ac 01       	movw	r20, r24
     67c:	a8 ee       	ldi	r26, 0xE8	; 232
     67e:	b3 e0       	ldi	r27, 0x03	; 3
     680:	0a d7       	rcall	.+3604   	; 0x1496 <__muluhisi3>
     682:	dc 01       	movw	r26, r24
     684:	cb 01       	movw	r24, r22
     686:	8c 19       	sub	r24, r12
     688:	9d 09       	sbc	r25, r13
     68a:	ae 09       	sbc	r26, r14
     68c:	bf 09       	sbc	r27, r15
     68e:	8e 01       	movw	r16, r28
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	80 17       	cp	r24, r16
     696:	91 07       	cpc	r25, r17
     698:	a2 07       	cpc	r26, r18
     69a:	b3 07       	cpc	r27, r19
     69c:	60 f3       	brcs	.-40     	; 0x676 <_delay_us+0x22>
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	0f 91       	pop	r16
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
     6aa:	df 90       	pop	r13
     6ac:	cf 90       	pop	r12
     6ae:	08 95       	ret

000006b0 <debounce_button>:
     6b0:	cf 93       	push	r28
     6b2:	23 b1       	in	r18, 0x03	; 3
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	08 2e       	mov	r0, r24
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <debounce_button+0xe>
     6ba:	35 95       	asr	r19
     6bc:	27 95       	ror	r18
     6be:	0a 94       	dec	r0
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <debounce_button+0xa>
     6c2:	20 fd       	sbrc	r18, 0
     6c4:	0f c0       	rjmp	.+30     	; 0x6e4 <debounce_button+0x34>
     6c6:	c8 2f       	mov	r28, r24
     6c8:	82 e3       	ldi	r24, 0x32	; 50
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	18 df       	rcall	.-464    	; 0x4fe <_delay_ms>
     6ce:	83 b1       	in	r24, 0x03	; 3
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <debounce_button+0x28>
     6d4:	95 95       	asr	r25
     6d6:	87 95       	ror	r24
     6d8:	ca 95       	dec	r28
     6da:	e2 f7       	brpl	.-8      	; 0x6d4 <debounce_button+0x24>
     6dc:	80 fd       	sbrc	r24, 0
     6de:	04 c0       	rjmp	.+8      	; 0x6e8 <debounce_button+0x38>
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	03 c0       	rjmp	.+6      	; 0x6ea <debounce_button+0x3a>
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <debounce_button+0x3a>
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <readAnalog>:
     6ee:	8f 70       	andi	r24, 0x0F	; 15
     6f0:	80 64       	ori	r24, 0x40	; 64
     6f2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
     6f6:	87 ec       	ldi	r24, 0xC7	; 199
     6f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     6fc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     700:	86 fd       	sbrc	r24, 6
     702:	fc cf       	rjmp	.-8      	; 0x6fc <readAnalog+0xe>
     704:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     708:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     70c:	08 95       	ret

0000070e <constrain>:
     70e:	86 17       	cp	r24, r22
     710:	97 07       	cpc	r25, r23
     712:	34 f0       	brlt	.+12     	; 0x720 <constrain+0x12>
     714:	48 17       	cp	r20, r24
     716:	59 07       	cpc	r21, r25
     718:	2c f4       	brge	.+10     	; 0x724 <constrain+0x16>
     71a:	84 2f       	mov	r24, r20
     71c:	95 2f       	mov	r25, r21
     71e:	08 95       	ret
     720:	86 2f       	mov	r24, r22
     722:	97 2f       	mov	r25, r23
     724:	08 95       	ret

00000726 <pulseIn>:
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	ba 01       	movw	r22, r20
     730:	0e c0       	rjmp	.+28     	; 0x74e <pulseIn+0x28>
     732:	8a 01       	movw	r16, r20
     734:	9b 01       	movw	r18, r22
     736:	0f 5f       	subi	r16, 0xFF	; 255
     738:	1f 4f       	sbci	r17, 0xFF	; 255
     73a:	2f 4f       	sbci	r18, 0xFF	; 255
     73c:	3f 4f       	sbci	r19, 0xFF	; 255
     73e:	40 34       	cpi	r20, 0x40	; 64
     740:	52 44       	sbci	r21, 0x42	; 66
     742:	6f 40       	sbci	r22, 0x0F	; 15
     744:	71 05       	cpc	r23, r1
     746:	09 f4       	brne	.+2      	; 0x74a <pulseIn+0x24>
     748:	5a c0       	rjmp	.+180    	; 0x7fe <pulseIn+0xd8>
     74a:	b9 01       	movw	r22, r18
     74c:	a8 01       	movw	r20, r16
     74e:	29 b1       	in	r18, 0x09	; 9
     750:	e8 2f       	mov	r30, r24
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	08 2e       	mov	r0, r24
     756:	02 c0       	rjmp	.+4      	; 0x75c <pulseIn+0x36>
     758:	35 95       	asr	r19
     75a:	27 95       	ror	r18
     75c:	0a 94       	dec	r0
     75e:	e2 f7       	brpl	.-8      	; 0x758 <pulseIn+0x32>
     760:	20 ff       	sbrs	r18, 0
     762:	e7 cf       	rjmp	.-50     	; 0x732 <pulseIn+0xc>
     764:	0d c0       	rjmp	.+26     	; 0x780 <pulseIn+0x5a>
     766:	db 01       	movw	r26, r22
     768:	ca 01       	movw	r24, r20
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	a1 1d       	adc	r26, r1
     76e:	b1 1d       	adc	r27, r1
     770:	40 34       	cpi	r20, 0x40	; 64
     772:	52 44       	sbci	r21, 0x42	; 66
     774:	6f 40       	sbci	r22, 0x0F	; 15
     776:	71 05       	cpc	r23, r1
     778:	09 f4       	brne	.+2      	; 0x77c <pulseIn+0x56>
     77a:	46 c0       	rjmp	.+140    	; 0x808 <pulseIn+0xe2>
     77c:	ac 01       	movw	r20, r24
     77e:	bd 01       	movw	r22, r26
     780:	89 b1       	in	r24, 0x09	; 9
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 2e       	mov	r0, r30
     786:	02 c0       	rjmp	.+4      	; 0x78c <pulseIn+0x66>
     788:	95 95       	asr	r25
     78a:	87 95       	ror	r24
     78c:	0a 94       	dec	r0
     78e:	e2 f7       	brpl	.-8      	; 0x788 <pulseIn+0x62>
     790:	80 fd       	sbrc	r24, 0
     792:	e9 cf       	rjmp	.-46     	; 0x766 <pulseIn+0x40>
     794:	0c c0       	rjmp	.+24     	; 0x7ae <pulseIn+0x88>
     796:	db 01       	movw	r26, r22
     798:	ca 01       	movw	r24, r20
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	a1 1d       	adc	r26, r1
     79e:	b1 1d       	adc	r27, r1
     7a0:	40 34       	cpi	r20, 0x40	; 64
     7a2:	52 44       	sbci	r21, 0x42	; 66
     7a4:	6f 40       	sbci	r22, 0x0F	; 15
     7a6:	71 05       	cpc	r23, r1
     7a8:	a1 f1       	breq	.+104    	; 0x812 <pulseIn+0xec>
     7aa:	ac 01       	movw	r20, r24
     7ac:	bd 01       	movw	r22, r26
     7ae:	89 b1       	in	r24, 0x09	; 9
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 2e       	mov	r0, r30
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <pulseIn+0x94>
     7b6:	95 95       	asr	r25
     7b8:	87 95       	ror	r24
     7ba:	0a 94       	dec	r0
     7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <pulseIn+0x90>
     7be:	80 ff       	sbrs	r24, 0
     7c0:	ea cf       	rjmp	.-44     	; 0x796 <pulseIn+0x70>
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	ba 01       	movw	r22, r20
     7c8:	0b c0       	rjmp	.+22     	; 0x7e0 <pulseIn+0xba>
     7ca:	4f 5f       	subi	r20, 0xFF	; 255
     7cc:	5f 4f       	sbci	r21, 0xFF	; 255
     7ce:	6f 4f       	sbci	r22, 0xFF	; 255
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	40 34       	cpi	r20, 0x40	; 64
     7d4:	82 e4       	ldi	r24, 0x42	; 66
     7d6:	58 07       	cpc	r21, r24
     7d8:	8f e0       	ldi	r24, 0x0F	; 15
     7da:	68 07       	cpc	r22, r24
     7dc:	71 05       	cpc	r23, r1
     7de:	f1 f0       	breq	.+60     	; 0x81c <pulseIn+0xf6>
     7e0:	89 b1       	in	r24, 0x09	; 9
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 2e       	mov	r0, r30
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <pulseIn+0xc6>
     7e8:	95 95       	asr	r25
     7ea:	87 95       	ror	r24
     7ec:	0a 94       	dec	r0
     7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <pulseIn+0xc2>
     7f0:	80 fd       	sbrc	r24, 0
     7f2:	eb cf       	rjmp	.-42     	; 0x7ca <pulseIn+0xa4>
     7f4:	34 2f       	mov	r19, r20
     7f6:	25 2f       	mov	r18, r21
     7f8:	86 2f       	mov	r24, r22
     7fa:	97 2f       	mov	r25, r23
     7fc:	13 c0       	rjmp	.+38     	; 0x824 <pulseIn+0xfe>
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e c0       	rjmp	.+28     	; 0x824 <pulseIn+0xfe>
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	09 c0       	rjmp	.+18     	; 0x824 <pulseIn+0xfe>
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	04 c0       	rjmp	.+8      	; 0x824 <pulseIn+0xfe>
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	63 2f       	mov	r22, r19
     826:	72 2f       	mov	r23, r18
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	08 95       	ret

0000082e <readUltrasonicDistance>:
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	16 2f       	mov	r17, r22
     836:	9b b1       	in	r25, 0x0b	; 11
     838:	c1 e0       	ldi	r28, 0x01	; 1
     83a:	d0 e0       	ldi	r29, 0x00	; 0
     83c:	02 c0       	rjmp	.+4      	; 0x842 <readUltrasonicDistance+0x14>
     83e:	cc 0f       	add	r28, r28
     840:	dd 1f       	adc	r29, r29
     842:	8a 95       	dec	r24
     844:	e2 f7       	brpl	.-8      	; 0x83e <readUltrasonicDistance+0x10>
     846:	dc 2f       	mov	r29, r28
     848:	d0 95       	com	r29
     84a:	9d 23       	and	r25, r29
     84c:	9b b9       	out	0x0b, r25	; 11
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	00 df       	rcall	.-512    	; 0x654 <_delay_us>
     854:	8b b1       	in	r24, 0x0b	; 11
     856:	c8 2b       	or	r28, r24
     858:	cb b9       	out	0x0b, r28	; 11
     85a:	8a e0       	ldi	r24, 0x0A	; 10
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	fa de       	rcall	.-524    	; 0x654 <_delay_us>
     860:	8b b1       	in	r24, 0x0b	; 11
     862:	d8 23       	and	r29, r24
     864:	db b9       	out	0x0b, r29	; 11
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	81 2f       	mov	r24, r17
     86a:	5d df       	rcall	.-326    	; 0x726 <pulseIn>
     86c:	99 23       	and	r25, r25
     86e:	24 f4       	brge	.+8      	; 0x878 <readUltrasonicDistance+0x4a>
     870:	6f 5f       	subi	r22, 0xFF	; 255
     872:	7f 4f       	sbci	r23, 0xFF	; 255
     874:	8f 4f       	sbci	r24, 0xFF	; 255
     876:	9f 4f       	sbci	r25, 0xFF	; 255
     878:	95 95       	asr	r25
     87a:	87 95       	ror	r24
     87c:	77 95       	ror	r23
     87e:	67 95       	ror	r22
     880:	c8 d4       	rcall	.+2448   	; 0x1212 <__floatsisf>
     882:	2d ec       	ldi	r18, 0xCD	; 205
     884:	3c ec       	ldi	r19, 0xCC	; 204
     886:	48 ee       	ldi	r20, 0xE8	; 232
     888:	51 e4       	ldi	r21, 0x41	; 65
     88a:	28 d4       	rcall	.+2128   	; 0x10dc <__divsf3>
     88c:	8f d4       	rcall	.+2334   	; 0x11ac <__fixsfsi>
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	08 95       	ret

00000896 <isObstacleDetected>:
     896:	cf 92       	push	r12
     898:	df 92       	push	r13
     89a:	ef 92       	push	r14
     89c:	ff 92       	push	r15
     89e:	66 e0       	ldi	r22, 0x06	; 6
     8a0:	85 e0       	ldi	r24, 0x05	; 5
     8a2:	c5 df       	rcall	.-118    	; 0x82e <readUltrasonicDistance>
     8a4:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <ditance_stop>
     8a8:	c4 2e       	mov	r12, r20
     8aa:	d1 2c       	mov	r13, r1
     8ac:	e1 2c       	mov	r14, r1
     8ae:	f1 2c       	mov	r15, r1
     8b0:	21 e0       	ldi	r18, 0x01	; 1
     8b2:	6c 15       	cp	r22, r12
     8b4:	7d 05       	cpc	r23, r13
     8b6:	8e 05       	cpc	r24, r14
     8b8:	9f 05       	cpc	r25, r15
     8ba:	0c f0       	brlt	.+2      	; 0x8be <isObstacleDetected+0x28>
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	82 2f       	mov	r24, r18
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	df 90       	pop	r13
     8c6:	cf 90       	pop	r12
     8c8:	08 95       	ret

000008ca <display_digit>:
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	2a 97       	sbiw	r28, 0x0a	; 10
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	cd bf       	out	0x3d, r28	; 61
     8de:	9a e0       	ldi	r25, 0x0A	; 10
     8e0:	ef e0       	ldi	r30, 0x0F	; 15
     8e2:	f2 e0       	ldi	r31, 0x02	; 2
     8e4:	de 01       	movw	r26, r28
     8e6:	11 96       	adiw	r26, 0x01	; 1
     8e8:	01 90       	ld	r0, Z+
     8ea:	0d 92       	st	X+, r0
     8ec:	9a 95       	dec	r25
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <display_digit+0x1e>
     8f0:	e1 e0       	ldi	r30, 0x01	; 1
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	ec 0f       	add	r30, r28
     8f6:	fd 1f       	adc	r31, r29
     8f8:	e8 0f       	add	r30, r24
     8fa:	f1 1d       	adc	r31, r1
     8fc:	80 81       	ld	r24, Z
     8fe:	80 ff       	sbrs	r24, 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <display_digit+0x40>
     902:	9b b1       	in	r25, 0x0b	; 11
     904:	9e 7f       	andi	r25, 0xFE	; 254
     906:	9b b9       	out	0x0b, r25	; 11
     908:	03 c0       	rjmp	.+6      	; 0x910 <display_digit+0x46>
     90a:	9b b1       	in	r25, 0x0b	; 11
     90c:	91 60       	ori	r25, 0x01	; 1
     90e:	9b b9       	out	0x0b, r25	; 11
     910:	81 ff       	sbrs	r24, 1
     912:	04 c0       	rjmp	.+8      	; 0x91c <display_digit+0x52>
     914:	9b b1       	in	r25, 0x0b	; 11
     916:	9d 7f       	andi	r25, 0xFD	; 253
     918:	9b b9       	out	0x0b, r25	; 11
     91a:	03 c0       	rjmp	.+6      	; 0x922 <display_digit+0x58>
     91c:	9b b1       	in	r25, 0x0b	; 11
     91e:	92 60       	ori	r25, 0x02	; 2
     920:	9b b9       	out	0x0b, r25	; 11
     922:	82 ff       	sbrs	r24, 2
     924:	04 c0       	rjmp	.+8      	; 0x92e <display_digit+0x64>
     926:	9b b1       	in	r25, 0x0b	; 11
     928:	9b 7f       	andi	r25, 0xFB	; 251
     92a:	9b b9       	out	0x0b, r25	; 11
     92c:	03 c0       	rjmp	.+6      	; 0x934 <display_digit+0x6a>
     92e:	9b b1       	in	r25, 0x0b	; 11
     930:	94 60       	ori	r25, 0x04	; 4
     932:	9b b9       	out	0x0b, r25	; 11
     934:	83 ff       	sbrs	r24, 3
     936:	04 c0       	rjmp	.+8      	; 0x940 <display_digit+0x76>
     938:	9b b1       	in	r25, 0x0b	; 11
     93a:	97 7f       	andi	r25, 0xF7	; 247
     93c:	9b b9       	out	0x0b, r25	; 11
     93e:	03 c0       	rjmp	.+6      	; 0x946 <display_digit+0x7c>
     940:	9b b1       	in	r25, 0x0b	; 11
     942:	98 60       	ori	r25, 0x08	; 8
     944:	9b b9       	out	0x0b, r25	; 11
     946:	84 ff       	sbrs	r24, 4
     948:	04 c0       	rjmp	.+8      	; 0x952 <display_digit+0x88>
     94a:	9b b1       	in	r25, 0x0b	; 11
     94c:	9f 7e       	andi	r25, 0xEF	; 239
     94e:	9b b9       	out	0x0b, r25	; 11
     950:	03 c0       	rjmp	.+6      	; 0x958 <display_digit+0x8e>
     952:	9b b1       	in	r25, 0x0b	; 11
     954:	90 61       	ori	r25, 0x10	; 16
     956:	9b b9       	out	0x0b, r25	; 11
     958:	85 ff       	sbrs	r24, 5
     95a:	04 c0       	rjmp	.+8      	; 0x964 <display_digit+0x9a>
     95c:	9b b1       	in	r25, 0x0b	; 11
     95e:	9f 7d       	andi	r25, 0xDF	; 223
     960:	9b b9       	out	0x0b, r25	; 11
     962:	03 c0       	rjmp	.+6      	; 0x96a <display_digit+0xa0>
     964:	9b b1       	in	r25, 0x0b	; 11
     966:	90 62       	ori	r25, 0x20	; 32
     968:	9b b9       	out	0x0b, r25	; 11
     96a:	86 ff       	sbrs	r24, 6
     96c:	04 c0       	rjmp	.+8      	; 0x976 <display_digit+0xac>
     96e:	8b b1       	in	r24, 0x0b	; 11
     970:	8f 7b       	andi	r24, 0xBF	; 191
     972:	8b b9       	out	0x0b, r24	; 11
     974:	03 c0       	rjmp	.+6      	; 0x97c <display_digit+0xb2>
     976:	8b b1       	in	r24, 0x0b	; 11
     978:	80 64       	ori	r24, 0x40	; 64
     97a:	8b b9       	out	0x0b, r24	; 11
     97c:	2a 96       	adiw	r28, 0x0a	; 10
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <PID_travel>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

void PID_travel(uint8_t weightedSum) {
     98e:	4f 92       	push	r4
     990:	5f 92       	push	r5
     992:	6f 92       	push	r6
     994:	7f 92       	push	r7
     996:	8f 92       	push	r8
     998:	9f 92       	push	r9
     99a:	af 92       	push	r10
     99c:	bf 92       	push	r11
     99e:	cf 92       	push	r12
     9a0:	df 92       	push	r13
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	00 d0       	rcall	.+0      	; 0x9ac <PID_travel+0x1e>
     9ac:	1f 92       	push	r1
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
	// Calculate the position of the line
	float position = weightedSum;
     9b2:	68 2f       	mov	r22, r24
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	29 d4       	rcall	.+2130   	; 0x120e <__floatunsisf>
     9bc:	6b 01       	movw	r12, r22
     9be:	7c 01       	movw	r14, r24

	// Calculate the error
	error = position;
     9c0:	60 93 63 02 	sts	0x0263, r22	; 0x800263 <error>
     9c4:	70 93 64 02 	sts	0x0264, r23	; 0x800264 <error+0x1>
     9c8:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <error+0x2>
     9cc:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <error+0x3>

	// Calculate the integral
	integral += error;
     9d0:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <integral>
     9d4:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <integral+0x1>
     9d8:	40 91 5d 02 	lds	r20, 0x025D	; 0x80025d <integral+0x2>
     9dc:	50 91 5e 02 	lds	r21, 0x025E	; 0x80025e <integral+0x3>
     9e0:	15 d3       	rcall	.+1578   	; 0x100c <__addsf3>
     9e2:	2b 01       	movw	r4, r22
     9e4:	3c 01       	movw	r6, r24
     9e6:	60 93 5b 02 	sts	0x025B, r22	; 0x80025b <integral>
     9ea:	70 93 5c 02 	sts	0x025C, r23	; 0x80025c <integral+0x1>
     9ee:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <integral+0x2>
     9f2:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <integral+0x3>

	// Calculate the derivative
	derivative = error - lastError;
     9f6:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <lastError>
     9fa:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <lastError+0x1>
     9fe:	40 91 61 02 	lds	r20, 0x0261	; 0x800261 <lastError+0x2>
     a02:	50 91 62 02 	lds	r21, 0x0262	; 0x800262 <lastError+0x3>
     a06:	c7 01       	movw	r24, r14
     a08:	b6 01       	movw	r22, r12
     a0a:	ff d2       	rcall	.+1534   	; 0x100a <__subsf3>
     a0c:	4b 01       	movw	r8, r22
     a0e:	5c 01       	movw	r10, r24
     a10:	60 93 57 02 	sts	0x0257, r22	; 0x800257 <derivative>
     a14:	70 93 58 02 	sts	0x0258, r23	; 0x800258 <derivative+0x1>
     a18:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <derivative+0x2>
     a1c:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <derivative+0x3>

	// Calculate the correction
	correction = Kp * error + Ki * integral + Kd * derivative;
     a20:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <Kp>
     a24:	30 91 0c 02 	lds	r19, 0x020C	; 0x80020c <Kp+0x1>
     a28:	40 91 0d 02 	lds	r20, 0x020D	; 0x80020d <Kp+0x2>
     a2c:	50 91 0e 02 	lds	r21, 0x020E	; 0x80020e <Kp+0x3>
     a30:	c7 01       	movw	r24, r14
     a32:	b6 01       	movw	r22, r12
     a34:	a2 d4       	rcall	.+2372   	; 0x137a <__mulsf3>
     a36:	69 83       	std	Y+1, r22	; 0x01
     a38:	7a 83       	std	Y+2, r23	; 0x02
     a3a:	8b 83       	std	Y+3, r24	; 0x03
     a3c:	9c 83       	std	Y+4, r25	; 0x04
     a3e:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Ki>
     a42:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <Ki+0x1>
     a46:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <Ki+0x2>
     a4a:	50 91 0a 02 	lds	r21, 0x020A	; 0x80020a <Ki+0x3>
     a4e:	c3 01       	movw	r24, r6
     a50:	b2 01       	movw	r22, r4
     a52:	93 d4       	rcall	.+2342   	; 0x137a <__mulsf3>
     a54:	9b 01       	movw	r18, r22
     a56:	ac 01       	movw	r20, r24
     a58:	69 81       	ldd	r22, Y+1	; 0x01
     a5a:	7a 81       	ldd	r23, Y+2	; 0x02
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	9c 81       	ldd	r25, Y+4	; 0x04
     a60:	d5 d2       	rcall	.+1450   	; 0x100c <__addsf3>
     a62:	2b 01       	movw	r4, r22
     a64:	3c 01       	movw	r6, r24
     a66:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <Kd>
     a6a:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <Kd+0x1>
     a6e:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <Kd+0x2>
     a72:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <Kd+0x3>
     a76:	c5 01       	movw	r24, r10
     a78:	b4 01       	movw	r22, r8
     a7a:	7f d4       	rcall	.+2302   	; 0x137a <__mulsf3>
     a7c:	9b 01       	movw	r18, r22
     a7e:	ac 01       	movw	r20, r24
     a80:	c3 01       	movw	r24, r6
     a82:	b2 01       	movw	r22, r4
     a84:	c3 d2       	rcall	.+1414   	; 0x100c <__addsf3>
     a86:	4b 01       	movw	r8, r22
     a88:	5c 01       	movw	r10, r24
     a8a:	60 93 53 02 	sts	0x0253, r22	; 0x800253 <correction>
     a8e:	70 93 54 02 	sts	0x0254, r23	; 0x800254 <correction+0x1>
     a92:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <correction+0x2>
     a96:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <correction+0x3>

	// Update the last error
	lastError = error;
     a9a:	c0 92 5f 02 	sts	0x025F, r12	; 0x80025f <lastError>
     a9e:	d0 92 60 02 	sts	0x0260, r13	; 0x800260 <lastError+0x1>
     aa2:	e0 92 61 02 	sts	0x0261, r14	; 0x800261 <lastError+0x2>
     aa6:	f0 92 62 02 	sts	0x0262, r15	; 0x800262 <lastError+0x3>

	// Use the correction value to adjust the motor speeds
	int leftMotorSpeed = currentSpeed - correction;
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	62 e6       	ldi	r22, 0x62	; 98
     ab0:	7e eb       	ldi	r23, 0xBE	; 190
     ab2:	8c eb       	ldi	r24, 0xBC	; 188
     ab4:	98 e3       	ldi	r25, 0x38	; 56
     ab6:	a9 d2       	rcall	.+1362   	; 0x100a <__subsf3>
     ab8:	79 d3       	rcall	.+1778   	; 0x11ac <__fixsfsi>
     aba:	6b 01       	movw	r12, r22
	int rightMotorSpeed = currentSpeed + correction;
     abc:	7c 01       	movw	r14, r24
     abe:	22 e6       	ldi	r18, 0x62	; 98
     ac0:	3e eb       	ldi	r19, 0xBE	; 190
     ac2:	4c eb       	ldi	r20, 0xBC	; 188
     ac4:	58 e3       	ldi	r21, 0x38	; 56
     ac6:	c5 01       	movw	r24, r10
     ac8:	b4 01       	movw	r22, r8
     aca:	a0 d2       	rcall	.+1344   	; 0x100c <__addsf3>
     acc:	6f d3       	rcall	.+1758   	; 0x11ac <__fixsfsi>
     ace:	4b 01       	movw	r8, r22
     ad0:	5c 01       	movw	r10, r24

	// Constrain motor speeds to allowable range
	leftMotorSpeed = constrain(leftMotorSpeed, 0, MAX_SPEED);
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	c6 01       	movw	r24, r12
     adc:	18 de       	rcall	.-976    	; 0x70e <constrain>
	rightMotorSpeed = constrain(rightMotorSpeed, 0, MAX_SPEED);
     ade:	7c 01       	movw	r14, r24
     ae0:	40 e0       	ldi	r20, 0x00	; 0
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	c4 01       	movw	r24, r8
     aea:	11 de       	rcall	.-990    	; 0x70e <constrain>

	// Set motor speeds
	setMotorSpeed(leftMotorSpeed, rightMotorSpeed);
     aec:	bc 01       	movw	r22, r24
     aee:	c7 01       	movw	r24, r14
     af0:	1a db       	rcall	.-2508   	; 0x126 <setMotorSpeed>
     af2:	8a e0       	ldi	r24, 0x0A	; 10

	_delay_ms(10); // Small delay for stability
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	03 dd       	rcall	.-1530   	; 0x4fe <_delay_ms>
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
}
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	df 90       	pop	r13
     b0a:	cf 90       	pop	r12
     b0c:	bf 90       	pop	r11
     b0e:	af 90       	pop	r10
     b10:	9f 90       	pop	r9
     b12:	8f 90       	pop	r8
     b14:	7f 90       	pop	r7
     b16:	6f 90       	pop	r6
     b18:	5f 90       	pop	r5
     b1a:	4f 90       	pop	r4
     b1c:	08 95       	ret

00000b1e <main>:
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////MAIN/////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main(void) {
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29

	// Initialize sensor pins as input
	DDRC = 0x00;
     b26:	17 b8       	out	0x07, r1	; 7

	// Initialize motor pins as output
	DDRB |= (1 << leftMotorPin) | (1 << rightMotorPin);
     b28:	84 b1       	in	r24, 0x04	; 4
     b2a:	86 60       	ori	r24, 0x06	; 6
     b2c:	84 b9       	out	0x04, r24	; 4

	// Set up PWM for motors
	TCCR1A = (1 << WGM10) | (1 << COM1A1) | (1 << COM1B1); // 8-bit Fast PWM
     b2e:	81 ea       	ldi	r24, 0xA1	; 161
     b30:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = (1 << WGM12) | (1 << CS11); // Prescaler 8
     b34:	8a e0       	ldi	r24, 0x0A	; 10
     b36:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>

	// Initialize encoder pins as input
	// Set encoder pins as inputs
	DDRD &= ~((1 << LEFT_ENCODER_PIN_A) | (1 << LEFT_ENCODER_PIN_B) |
     b3a:	8a b1       	in	r24, 0x0a	; 10
     b3c:	83 73       	andi	r24, 0x33	; 51
     b3e:	8a b9       	out	0x0a, r24	; 10
	(1 << RIGHT_ENCODER_PIN_A) | (1 << RIGHT_ENCODER_PIN_B));

	// Enable pull-up resistors on encoder pins
	PORTD |= (1 << LEFT_ENCODER_PIN_A) | (1 << LEFT_ENCODER_PIN_B) |
     b40:	8b b1       	in	r24, 0x0b	; 11
     b42:	8c 6c       	ori	r24, 0xCC	; 204
     b44:	8b b9       	out	0x0b, r24	; 11
	(1 << RIGHT_ENCODER_PIN_A) | (1 << RIGHT_ENCODER_PIN_B);
	EICRA = (1 << ISC00) | (1 << ISC10); // Trigger on any logical change and falling edge
     b46:	85 e0       	ldi	r24, 0x05	; 5
     b48:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	EIMSK = (1 << INT0) | (1 << INT1);   // Enable external interrupts and interrupt 0 and 1
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8d bb       	out	0x1d, r24	; 29

	// Initialize ultrasonic sensor pins as output/input
	DDRD |= (1 << trigPin1);
     b50:	8a b1       	in	r24, 0x0a	; 10
     b52:	80 62       	ori	r24, 0x20	; 32
     b54:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << echoPin1);
     b56:	8a b1       	in	r24, 0x0a	; 10
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	8a b9       	out	0x0a, r24	; 10

	// Set buttons as inputs
	DDRB &= ~((1 << BUTTON_PIN_INCREMENT) | (1 << BUTTON_PIN_DECREMENT) | (1 << BUTTON_PIN_START)) | (1 << TOUCH_PIN_SERVED);
     b5c:	84 b1       	in	r24, 0x04	; 4
     b5e:	8c 77       	andi	r24, 0x7C	; 124
     b60:	84 b9       	out	0x04, r24	; 4
	// Enable pull-up resistors
	PORTB |= (1 << BUTTON_PIN_INCREMENT) | (1 << BUTTON_PIN_DECREMENT) | (1 << BUTTON_PIN_START) | (1 << TOUCH_PIN_SERVED);
     b62:	85 b1       	in	r24, 0x05	; 5
     b64:	83 69       	ori	r24, 0x93	; 147
     b66:	85 b9       	out	0x05, r24	; 5

	// Set PD0-PD6 as output
	DDRD |= (1 << SEG_A) | (1 << SEG_B) | (1 << SEG_C) | (1 << SEG_D) |
     b68:	8a b1       	in	r24, 0x0a	; 10
     b6a:	8f 67       	ori	r24, 0x7F	; 127
     b6c:	8a b9       	out	0x0a, r24	; 10
	(1 << SEG_E) | (1 << SEG_F) | (1 << SEG_G);

	// Enable global interrupts
	sei();
     b6e:	78 94       	sei

	// Initialize timers for counts
	init_timer();
     b70:	9a dc       	rcall	.-1740   	; 0x4a6 <init_timer>
		uint8_t sensorValues[NUM_SENSORS];
		uint8_t weightedSum = 0;
		uint8_t sum = 0;
		uint8_t allSensorsHigh = 1;

		if (debounce_button(BUTTON_PIN_INCREMENT)) {
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	9d dd       	rcall	.-1222   	; 0x6b0 <debounce_button>
     b76:	88 23       	and	r24, r24
     b78:	81 f0       	breq	.+32     	; 0xb9a <main+0x7c>
			if (table_number < MAX_TABLE_COUNT) {
     b7a:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <table_number>
     b7e:	84 30       	cpi	r24, 0x04	; 4
     b80:	40 f4       	brcc	.+16     	; 0xb92 <main+0x74>
				table_number++;
     b82:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <table_number>
     b86:	8f 5f       	subi	r24, 0xFF	; 255
     b88:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <table_number>
				// Display the number on the 7-segment display
				display_digit(table_number);
     b8c:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <table_number>
			}
			// Wait until button is released
			while (debounce_button(BUTTON_PIN_INCREMENT));
     b90:	9c de       	rcall	.-712    	; 0x8ca <display_digit>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	8d dd       	rcall	.-1254   	; 0x6b0 <debounce_button>
     b96:	81 11       	cpse	r24, r1
		}

		if (debounce_button(BUTTON_PIN_DECREMENT)) {
     b98:	fc cf       	rjmp	.-8      	; 0xb92 <main+0x74>
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	89 dd       	rcall	.-1262   	; 0x6b0 <debounce_button>
     b9e:	88 23       	and	r24, r24
     ba0:	81 f0       	breq	.+32     	; 0xbc2 <main+0xa4>
			if (table_number > 0) {
     ba2:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <table_number>
     ba6:	88 23       	and	r24, r24
     ba8:	41 f0       	breq	.+16     	; 0xbba <main+0x9c>
				table_number--;
     baa:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <table_number>
     bae:	81 50       	subi	r24, 0x01	; 1
     bb0:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <table_number>
				// Display the number on the 7-segment display
				display_digit(table_number);
     bb4:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <table_number>
			}
			// Wait until button is released
			while (debounce_button(BUTTON_PIN_DECREMENT));
     bb8:	88 de       	rcall	.-752    	; 0x8ca <display_digit>
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	79 dd       	rcall	.-1294   	; 0x6b0 <debounce_button>
     bbe:	81 11       	cpse	r24, r1
     bc0:	fc cf       	rjmp	.-8      	; 0xbba <main+0x9c>
		}

		if (debounce_button(BUTTON_PIN_START)) {
     bc2:	87 e0       	ldi	r24, 0x07	; 7
     bc4:	75 dd       	rcall	.-1302   	; 0x6b0 <debounce_button>
     bc6:	88 23       	and	r24, r24
     bc8:	51 f0       	breq	.+20     	; 0xbde <main+0xc0>
			start_state = 1; // Start the robot
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <start_state>
			mode = 2; // Set mode to accelerating
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <mode>
			// Wait until button is released
			while (debounce_button(BUTTON_PIN_START));
     bd6:	87 e0       	ldi	r24, 0x07	; 7
     bd8:	6b dd       	rcall	.-1322   	; 0x6b0 <debounce_button>
     bda:	81 11       	cpse	r24, r1
     bdc:	fc cf       	rjmp	.-8      	; 0xbd6 <main+0xb8>
     bde:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <start_state>

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////START OPERATIONS/////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////

		if(start_state == 1){
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	09 f0       	breq	.+2      	; 0xbe8 <main+0xca>
     be6:	07 c2       	rjmp	.+1038   	; 0xff6 <main+0x4d8>

			if (serving_state == 2){
     be8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	79 f4       	brne	.+30     	; 0xc0e <main+0xf0>

				while(1){
					if (debounce_button(TOUCH_PIN_SERVED)) {
     bf0:	84 e0       	ldi	r24, 0x04	; 4
     bf2:	5e dd       	rcall	.-1348   	; 0x6b0 <debounce_button>
     bf4:	88 23       	and	r24, r24
     bf6:	e1 f3       	breq	.-8      	; 0xbf0 <main+0xd2>
						serving_state = 3; // Start the robot
     bf8:	83 e0       	ldi	r24, 0x03	; 3
     bfa:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
						mode = 2; // Set mode to accelerating
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <mode>
						// Wait until button is released
						while (debounce_button(TOUCH_PIN_SERVED));
     c04:	84 e0       	ldi	r24, 0x04	; 4
     c06:	54 dd       	rcall	.-1368   	; 0x6b0 <debounce_button>
     c08:	81 11       	cpse	r24, r1
     c0a:	fc cf       	rjmp	.-8      	; 0xc04 <main+0xe6>
     c0c:	f1 cf       	rjmp	.-30     	; 0xbf0 <main+0xd2>
					}
				}
				// Move the robot back to the starting point
				turnBend(0);    // Turn 90 degrees back

				} if (serving_state == 3) {
     c0e:	83 30       	cpi	r24, 0x03	; 3
     c10:	09 f0       	breq	.+2      	; 0xc14 <main+0xf6>
     c12:	4a c0       	rjmp	.+148    	; 0xca8 <main+0x18a>
     c14:	09 c0       	rjmp	.+18     	; 0xc28 <main+0x10a>

				// Read the sensor values and calculate the weighted sum and the sum
				for (uint8_t i = 0; i < NUM_SENSORS; i++) {
					sensorValues[i] = readAnalog(sensorPins[i]);
     c16:	ec 2f       	mov	r30, r28
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	e7 5e       	subi	r30, 0xE7	; 231
     c1c:	fd 4f       	sbci	r31, 0xFD	; 253
     c1e:	80 81       	ld	r24, Z
     c20:	66 dd       	rcall	.-1332   	; 0x6ee <readAnalog>
				turnBend(0);    // Turn 90 degrees back

				} if (serving_state == 3) {

				// Read the sensor values and calculate the weighted sum and the sum
				for (uint8_t i = 0; i < NUM_SENSORS; i++) {
     c22:	cf 5f       	subi	r28, 0xFF	; 255
						temp_sensor_digital_value = 1;
					}
					sum += temp_sensor_digital_value;
					weightedSum += temp_sensor_digital_value * weights[i];
					if (sensorValues[i] < 500) {  // Assuming a threshold of 500 for high signal
						allSensorsHigh = 0;
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <main+0x10e>
     c28:	c0 e0       	ldi	r28, 0x00	; 0
     c2a:	81 e0       	ldi	r24, 0x01	; 1
				turnBend(0);    // Turn 90 degrees back

				} if (serving_state == 3) {

				// Read the sensor values and calculate the weighted sum and the sum
				for (uint8_t i = 0; i < NUM_SENSORS; i++) {
     c2c:	c5 30       	cpi	r28, 0x05	; 5
     c2e:	98 f3       	brcs	.-26     	; 0xc16 <main+0xf8>
						allSensorsHigh = 0;
					}
				}

				// Increment stop count if all sensors are high
				if (allSensorsHigh == 1) {
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	51 f5       	brne	.+84     	; 0xc88 <main+0x16a>
					if (millis() - previous_table_count_update_time > MIN_TIME_INTERVAL) {
     c34:	59 dc       	rcall	.-1870   	; 0x4e8 <millis>
     c36:	00 91 22 02 	lds	r16, 0x0222	; 0x800222 <previous_table_count_update_time>
     c3a:	10 91 23 02 	lds	r17, 0x0223	; 0x800223 <previous_table_count_update_time+0x1>
     c3e:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <previous_table_count_update_time+0x2>
     c42:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <previous_table_count_update_time+0x3>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	80 1b       	sub	r24, r16
     c4c:	91 0b       	sbc	r25, r17
     c4e:	a2 0b       	sbc	r26, r18
     c50:	b3 0b       	sbc	r27, r19
     c52:	89 3e       	cpi	r24, 0xE9	; 233
     c54:	93 40       	sbci	r25, 0x03	; 3
     c56:	a1 05       	cpc	r26, r1
     c58:	b1 05       	cpc	r27, r1
     c5a:	70 f0       	brcs	.+28     	; 0xc78 <main+0x15a>
						table_count--;
     c5c:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <table_count>
     c60:	81 50       	subi	r24, 0x01	; 1
     c62:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <table_count>
						previous_table_count_update_time = millis();
     c66:	40 dc       	rcall	.-1920   	; 0x4e8 <millis>
     c68:	60 93 22 02 	sts	0x0222, r22	; 0x800222 <previous_table_count_update_time>
     c6c:	70 93 23 02 	sts	0x0223, r23	; 0x800223 <previous_table_count_update_time+0x1>
     c70:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <previous_table_count_update_time+0x2>
     c74:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <previous_table_count_update_time+0x3>
					}
					if (stopCount >= stopCountThreshold) {
     c78:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stopCount>
     c7c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stopCount+0x1>
     c80:	0a 97       	sbiw	r24, 0x0a	; 10
     c82:	14 f0       	brlt	.+4      	; 0xc88 <main+0x16a>
						mode = 0; // Set mode to decelerating
     c84:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <mode>
					}
				}

				if (table_count == 0) {
     c88:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <table_count>
     c8c:	81 11       	cpse	r24, r1
					turnBend(180);    // Turn 90 degrees back
     c8e:	09 c0       	rjmp	.+18     	; 0xca2 <main+0x184>
     c90:	84 eb       	ldi	r24, 0xB4	; 180
     c92:	59 dc       	rcall	.-1870   	; 0x546 <turnBend>
					serving_state = 1; // Set the serving state to none
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
					start_state = 0; // Set the start to false
     c9a:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <start_state>
					table_number = 0; // Reset the table number
     c9e:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <table_number>
				}


				PID_travel(weightedSum);
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	74 de       	rcall	.-792    	; 0x98e <PID_travel>
     ca6:	65 cf       	rjmp	.-310    	; 0xb72 <main+0x54>
     ca8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <mode>
				
				} else {

				// Start the robot with the acceleration from the speed profile
				if (mode == 2){
     cac:	82 30       	cpi	r24, 0x02	; 2
     cae:	09 f0       	breq	.+2      	; 0xcb2 <main+0x194>
     cb0:	54 c0       	rjmp	.+168    	; 0xd5a <main+0x23c>
					uint8_t right_motor_speed = 0;

					// Accelerate the motors until the maximum speed is reached
					uint8_t speedReached = 0;

					if (leftSpeedMPS < MAX_SPEED) {
     cb2:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <leftSpeedMPS>
     cb6:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <leftSpeedMPS+0x1>
     cba:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <leftSpeedMPS+0x2>
     cbe:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <leftSpeedMPS+0x3>
     cc2:	22 e5       	ldi	r18, 0x52	; 82
     cc4:	37 e7       	ldi	r19, 0x77	; 119
     cc6:	43 e4       	ldi	r20, 0x43	; 67
     cc8:	59 e3       	ldi	r21, 0x39	; 57
     cca:	04 d2       	rcall	.+1032   	; 0x10d4 <__cmpsf2>
     ccc:	88 23       	and	r24, r24
     cce:	94 f4       	brge	.+36     	; 0xcf4 <main+0x1d6>
						left_motor_speed += (leftAccelerationMPS2 < MAX_ACCELERATION) ? 1 : -1;
     cd0:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <leftAccelerationMPS2>
     cd4:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <leftAccelerationMPS2+0x1>
     cd8:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <leftAccelerationMPS2+0x2>
     cdc:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <leftAccelerationMPS2+0x3>
     ce0:	2d e3       	ldi	r18, 0x3D	; 61
     ce2:	3a e0       	ldi	r19, 0x0A	; 10
     ce4:	47 e5       	ldi	r20, 0x57	; 87
     ce6:	50 e4       	ldi	r21, 0x40	; 64
     ce8:	f5 d1       	rcall	.+1002   	; 0x10d4 <__cmpsf2>
     cea:	88 23       	and	r24, r24
     cec:	34 f4       	brge	.+12     	; 0xcfa <main+0x1dc>
     cee:	c0 e0       	ldi	r28, 0x00	; 0
					// Control motor speed based on acceleration and speed
					uint8_t left_motor_speed = 0;
					uint8_t right_motor_speed = 0;

					// Accelerate the motors until the maximum speed is reached
					uint8_t speedReached = 0;
     cf0:	d1 e0       	ldi	r29, 0x01	; 1

					if (leftSpeedMPS < MAX_SPEED) {
						left_motor_speed += (leftAccelerationMPS2 < MAX_ACCELERATION) ? 1 : -1;
     cf2:	05 c0       	rjmp	.+10     	; 0xcfe <main+0x1e0>
						} else {
						left_motor_speed = 0;
						speedReached = 1;
     cf4:	c1 e0       	ldi	r28, 0x01	; 1
					uint8_t speedReached = 0;

					if (leftSpeedMPS < MAX_SPEED) {
						left_motor_speed += (leftAccelerationMPS2 < MAX_ACCELERATION) ? 1 : -1;
						} else {
						left_motor_speed = 0;
     cf6:	d0 e0       	ldi	r29, 0x00	; 0
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <main+0x1e0>
					// Control motor speed based on acceleration and speed
					uint8_t left_motor_speed = 0;
					uint8_t right_motor_speed = 0;

					// Accelerate the motors until the maximum speed is reached
					uint8_t speedReached = 0;
     cfa:	c0 e0       	ldi	r28, 0x00	; 0

					if (leftSpeedMPS < MAX_SPEED) {
						left_motor_speed += (leftAccelerationMPS2 < MAX_ACCELERATION) ? 1 : -1;
     cfc:	df ef       	ldi	r29, 0xFF	; 255
						} else {
						left_motor_speed = 0;
						speedReached = 1;
					}

					if (rightSpeedMPS < MAX_SPEED) {
     cfe:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <rightSpeedMPS>
     d02:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <rightSpeedMPS+0x1>
     d06:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <rightSpeedMPS+0x2>
     d0a:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <rightSpeedMPS+0x3>
     d0e:	22 e5       	ldi	r18, 0x52	; 82
     d10:	37 e7       	ldi	r19, 0x77	; 119
     d12:	43 e4       	ldi	r20, 0x43	; 67
     d14:	59 e3       	ldi	r21, 0x39	; 57
     d16:	de d1       	rcall	.+956    	; 0x10d4 <__cmpsf2>
     d18:	88 23       	and	r24, r24
     d1a:	8c f4       	brge	.+34     	; 0xd3e <main+0x220>
						right_motor_speed += (rightAccelerationMPS2 < MAX_ACCELERATION) ? 1 : -1;
     d1c:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <rightAccelerationMPS2>
     d20:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <rightAccelerationMPS2+0x1>
     d24:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <rightAccelerationMPS2+0x2>
     d28:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <rightAccelerationMPS2+0x3>
     d2c:	2d e3       	ldi	r18, 0x3D	; 61
     d2e:	3a e0       	ldi	r19, 0x0A	; 10
     d30:	47 e5       	ldi	r20, 0x57	; 87
     d32:	50 e4       	ldi	r21, 0x40	; 64
     d34:	cf d1       	rcall	.+926    	; 0x10d4 <__cmpsf2>
     d36:	88 23       	and	r24, r24
     d38:	2c f4       	brge	.+10     	; 0xd44 <main+0x226>
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	04 c0       	rjmp	.+8      	; 0xd46 <main+0x228>
						} else {
						right_motor_speed = 0;
						speedReached = 1;
     d3e:	c1 e0       	ldi	r28, 0x01	; 1
					}

					if (rightSpeedMPS < MAX_SPEED) {
						right_motor_speed += (rightAccelerationMPS2 < MAX_ACCELERATION) ? 1 : -1;
						} else {
						right_motor_speed = 0;
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <main+0x228>
						left_motor_speed = 0;
						speedReached = 1;
					}

					if (rightSpeedMPS < MAX_SPEED) {
						right_motor_speed += (rightAccelerationMPS2 < MAX_ACCELERATION) ? 1 : -1;
     d44:	6f ef       	ldi	r22, 0xFF	; 255
						right_motor_speed = 0;
						speedReached = 1;
					}

					// Set motor speeds
					setMotorSpeed(left_motor_speed, right_motor_speed);
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	8d 2f       	mov	r24, r29
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	ec d9       	rcall	.-3112   	; 0x126 <setMotorSpeed>
     d4e:	c1 30       	cpi	r28, 0x01	; 1
					if (speedReached == 1) {
     d50:	21 f4       	brne	.+8      	; 0xd5a <main+0x23c>
						mode = 1; // Set mode to normal operation
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <mode>
						break;
     d58:	51 c1       	rjmp	.+674    	; 0xffc <main+0x4de>
					}
					speedReached = 0;
				}

				// Start the robot with the deceleration from the speed profile
				if (mode == 0) {
     d5a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <mode>
     d5e:	81 11       	cpse	r24, r1
     d60:	4e c0       	rjmp	.+156    	; 0xdfe <main+0x2e0>
					uint8_t right_motor_speed = 0;

					// Decelerate the motors until they come to a stop
					uint8_t speedReached = 0;

					if (leftSpeedMPS > 0) {
     d62:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <leftSpeedMPS>
     d66:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <leftSpeedMPS+0x1>
     d6a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <leftSpeedMPS+0x2>
     d6e:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <leftSpeedMPS+0x3>
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	a9 01       	movw	r20, r18
     d78:	fc d2       	rcall	.+1528   	; 0x1372 <__gesf2>
     d7a:	18 16       	cp	r1, r24
     d7c:	a4 f4       	brge	.+40     	; 0xda6 <main+0x288>
						left_motor_speed -= (leftAccelerationMPS2 > -MAX_DECELERATION) ? 1 : 0;
     d7e:	d1 e0       	ldi	r29, 0x01	; 1
     d80:	28 e4       	ldi	r18, 0x48	; 72
     d82:	31 ee       	ldi	r19, 0xE1	; 225
     d84:	42 eb       	ldi	r20, 0xB2	; 178
     d86:	50 ec       	ldi	r21, 0xC0	; 192
     d88:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <leftAccelerationMPS2>
     d8c:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <leftAccelerationMPS2+0x1>
     d90:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <leftAccelerationMPS2+0x2>
     d94:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <leftAccelerationMPS2+0x3>
     d98:	ec d2       	rcall	.+1496   	; 0x1372 <__gesf2>
     d9a:	18 16       	cp	r1, r24
     d9c:	0c f0       	brlt	.+2      	; 0xda0 <main+0x282>
     d9e:	d0 e0       	ldi	r29, 0x00	; 0
     da0:	d1 95       	neg	r29
					// Control motor speed based on deceleration and speed
					uint8_t left_motor_speed = 0;
					uint8_t right_motor_speed = 0;

					// Decelerate the motors until they come to a stop
					uint8_t speedReached = 0;
     da2:	10 e0       	ldi	r17, 0x00	; 0
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <main+0x28c>

					if (leftSpeedMPS > 0) {
						left_motor_speed -= (leftAccelerationMPS2 > -MAX_DECELERATION) ? 1 : 0;
						} else {
						left_motor_speed = 0;
						speedReached = 1;
     da6:	11 e0       	ldi	r17, 0x01	; 1
					uint8_t speedReached = 0;

					if (leftSpeedMPS > 0) {
						left_motor_speed -= (leftAccelerationMPS2 > -MAX_DECELERATION) ? 1 : 0;
						} else {
						left_motor_speed = 0;
     da8:	d0 e0       	ldi	r29, 0x00	; 0
						speedReached = 1;
					}

					if (rightSpeedMPS > 0) {
     daa:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <rightSpeedMPS>
     dae:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <rightSpeedMPS+0x1>
     db2:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <rightSpeedMPS+0x2>
     db6:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <rightSpeedMPS+0x3>
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	a9 01       	movw	r20, r18
     dc0:	d8 d2       	rcall	.+1456   	; 0x1372 <__gesf2>
     dc2:	18 16       	cp	r1, r24
     dc4:	a4 f4       	brge	.+40     	; 0xdee <main+0x2d0>
						right_motor_speed -= (rightAccelerationMPS2 > -MAX_DECELERATION) ? 1 : 0;
     dc6:	c1 e0       	ldi	r28, 0x01	; 1
     dc8:	28 e4       	ldi	r18, 0x48	; 72
     dca:	31 ee       	ldi	r19, 0xE1	; 225
     dcc:	42 eb       	ldi	r20, 0xB2	; 178
     dce:	50 ec       	ldi	r21, 0xC0	; 192
     dd0:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <rightAccelerationMPS2>
     dd4:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <rightAccelerationMPS2+0x1>
     dd8:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <rightAccelerationMPS2+0x2>
     ddc:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <rightAccelerationMPS2+0x3>
     de0:	c8 d2       	rcall	.+1424   	; 0x1372 <__gesf2>
     de2:	18 16       	cp	r1, r24
     de4:	0c f0       	brlt	.+2      	; 0xde8 <main+0x2ca>
     de6:	c0 e0       	ldi	r28, 0x00	; 0
     de8:	6c 2f       	mov	r22, r28
     dea:	61 95       	neg	r22
						} else {
						right_motor_speed = 0;
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <main+0x2d4>
						speedReached = 1;
					}

					// Set motor speeds
					setMotorSpeed(left_motor_speed, right_motor_speed);
     dee:	11 e0       	ldi	r17, 0x01	; 1
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	8d 2f       	mov	r24, r29
     df6:	90 e0       	ldi	r25, 0x00	; 0
					if (speedReached == 1) {
     df8:	96 d9       	rcall	.-3284   	; 0x126 <setMotorSpeed>
     dfa:	11 30       	cpi	r17, 0x01	; 1
					}

					if (rightSpeedMPS > 0) {
						right_motor_speed -= (rightAccelerationMPS2 > -MAX_DECELERATION) ? 1 : 0;
						} else {
						right_motor_speed = 0;
     dfc:	19 f0       	breq	.+6      	; 0xe04 <main+0x2e6>
     dfe:	c0 e0       	ldi	r28, 0x00	; 0
     e00:	01 e0       	ldi	r16, 0x01	; 1
					}

					// Set motor speeds
					setMotorSpeed(left_motor_speed, right_motor_speed);
					if (speedReached == 1) {
						mode = 1; // Set mode to normal operation
     e02:	0c c0       	rjmp	.+24     	; 0xe1c <main+0x2fe>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <mode>
					speedReached = 0;
				}

				// Read the sensor values and calculate the weighted sum and the sum
				for (uint8_t i = 0; i < NUM_SENSORS; i++) {
					sensorValues[i] = readAnalog(sensorPins[i]);
     e0a:	f8 c0       	rjmp	.+496    	; 0xffc <main+0x4de>
     e0c:	ec 2f       	mov	r30, r28
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	e7 5e       	subi	r30, 0xE7	; 231
     e12:	fd 4f       	sbci	r31, 0xFD	; 253
     e14:	80 81       	ld	r24, Z
					}
					speedReached = 0;
				}

				// Read the sensor values and calculate the weighted sum and the sum
				for (uint8_t i = 0; i < NUM_SENSORS; i++) {
     e16:	6b dc       	rcall	.-1834   	; 0x6ee <readAnalog>
						temp_sensor_digital_value = 1;
					}
					sum += temp_sensor_digital_value;
					weightedSum += temp_sensor_digital_value * weights[i];
					if (sensorValues[i] < 500) {  // Assuming a threshold of 500 for high signal
						allSensorsHigh = 0;
     e18:	cf 5f       	subi	r28, 0xFF	; 255
					}
					speedReached = 0;
				}

				// Read the sensor values and calculate the weighted sum and the sum
				for (uint8_t i = 0; i < NUM_SENSORS; i++) {
     e1a:	00 e0       	ldi	r16, 0x00	; 0
     e1c:	c5 30       	cpi	r28, 0x05	; 5
						allSensorsHigh = 0;
					}
				}

				// Check for obstacles
				if (isObstacleDetected() == 1) {
     e1e:	b0 f3       	brcs	.-20     	; 0xe0c <main+0x2ee>
     e20:	3a dd       	rcall	.-1420   	; 0x896 <isObstacleDetected>
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	09 f0       	breq	.+2      	; 0xe28 <main+0x30a>
						uint8_t right_motor_speed = 0;

						// Decelerate the motors until they come to a stop
						uint8_t speedReached = 0;

						if (leftSpeedMPS > 0) {
     e26:	5c c0       	rjmp	.+184    	; 0xee0 <main+0x3c2>
     e28:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <leftSpeedMPS>
     e2c:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <leftSpeedMPS+0x1>
     e30:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <leftSpeedMPS+0x2>
     e34:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <leftSpeedMPS+0x3>
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	a9 01       	movw	r20, r18
     e3e:	99 d2       	rcall	.+1330   	; 0x1372 <__gesf2>
     e40:	18 16       	cp	r1, r24
     e42:	a4 f4       	brge	.+40     	; 0xe6c <main+0x34e>
							left_motor_speed -= (leftAccelerationMPS2 > -MAX_DECELERATION) ? 1 : 0;
     e44:	d1 e0       	ldi	r29, 0x01	; 1
     e46:	28 e4       	ldi	r18, 0x48	; 72
     e48:	31 ee       	ldi	r19, 0xE1	; 225
     e4a:	42 eb       	ldi	r20, 0xB2	; 178
     e4c:	50 ec       	ldi	r21, 0xC0	; 192
     e4e:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <leftAccelerationMPS2>
     e52:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <leftAccelerationMPS2+0x1>
     e56:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <leftAccelerationMPS2+0x2>
     e5a:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <leftAccelerationMPS2+0x3>
     e5e:	89 d2       	rcall	.+1298   	; 0x1372 <__gesf2>
     e60:	18 16       	cp	r1, r24
     e62:	0c f0       	brlt	.+2      	; 0xe66 <main+0x348>
     e64:	d0 e0       	ldi	r29, 0x00	; 0
     e66:	d1 95       	neg	r29
						// Control motor speed based on deceleration and speed
						uint8_t left_motor_speed = 0;
						uint8_t right_motor_speed = 0;

						// Decelerate the motors until they come to a stop
						uint8_t speedReached = 0;
     e68:	10 e0       	ldi	r17, 0x00	; 0

						if (leftSpeedMPS > 0) {
							left_motor_speed -= (leftAccelerationMPS2 > -MAX_DECELERATION) ? 1 : 0;
							} else {
							left_motor_speed = 0;
							speedReached = 1;
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <main+0x352>
						uint8_t speedReached = 0;

						if (leftSpeedMPS > 0) {
							left_motor_speed -= (leftAccelerationMPS2 > -MAX_DECELERATION) ? 1 : 0;
							} else {
							left_motor_speed = 0;
     e6c:	11 e0       	ldi	r17, 0x01	; 1
							speedReached = 1;
						}

						if (rightSpeedMPS > 0) {
     e6e:	d0 e0       	ldi	r29, 0x00	; 0
     e70:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <rightSpeedMPS>
     e74:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <rightSpeedMPS+0x1>
     e78:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <rightSpeedMPS+0x2>
     e7c:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <rightSpeedMPS+0x3>
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	a9 01       	movw	r20, r18
     e86:	75 d2       	rcall	.+1258   	; 0x1372 <__gesf2>
     e88:	18 16       	cp	r1, r24
							right_motor_speed -= (rightAccelerationMPS2 > -MAX_DECELERATION) ? 1 : 0;
     e8a:	a4 f4       	brge	.+40     	; 0xeb4 <main+0x396>
     e8c:	c1 e0       	ldi	r28, 0x01	; 1
     e8e:	28 e4       	ldi	r18, 0x48	; 72
     e90:	31 ee       	ldi	r19, 0xE1	; 225
     e92:	42 eb       	ldi	r20, 0xB2	; 178
     e94:	50 ec       	ldi	r21, 0xC0	; 192
     e96:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <rightAccelerationMPS2>
     e9a:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <rightAccelerationMPS2+0x1>
     e9e:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <rightAccelerationMPS2+0x2>
     ea2:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <rightAccelerationMPS2+0x3>
     ea6:	65 d2       	rcall	.+1226   	; 0x1372 <__gesf2>
     ea8:	18 16       	cp	r1, r24
     eaa:	0c f0       	brlt	.+2      	; 0xeae <main+0x390>
     eac:	c0 e0       	ldi	r28, 0x00	; 0
							} else {
							right_motor_speed = 0;
							speedReached = 1;
     eae:	6c 2f       	mov	r22, r28
						}

						if (rightSpeedMPS > 0) {
							right_motor_speed -= (rightAccelerationMPS2 > -MAX_DECELERATION) ? 1 : 0;
							} else {
							right_motor_speed = 0;
     eb0:	61 95       	neg	r22
							speedReached = 1;
						}

						// Set motor speeds
						setMotorSpeed(left_motor_speed, right_motor_speed);
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <main+0x39a>
     eb4:	11 e0       	ldi	r17, 0x01	; 1
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	8d 2f       	mov	r24, r29
						if (speedReached == 1) {
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	33 d9       	rcall	.-3482   	; 0x126 <setMotorSpeed>
     ec0:	11 30       	cpi	r17, 0x01	; 1
							mode = 1; // Set mode to normal operation
     ec2:	09 f0       	breq	.+2      	; 0xec6 <main+0x3a8>
     ec4:	b1 cf       	rjmp	.-158    	; 0xe28 <main+0x30a>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
							break;
						}
						speedReached = 0;
					}
					while (isObstacleDetected() == 1) {
     ec8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <mode>
						_delay_ms(100); // Wait until obstacles pass
     ecc:	03 c0       	rjmp	.+6      	; 0xed4 <main+0x3b6>
     ece:	84 e6       	ldi	r24, 0x64	; 100
							mode = 1; // Set mode to normal operation
							break;
						}
						speedReached = 0;
					}
					while (isObstacleDetected() == 1) {
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	15 db       	rcall	.-2518   	; 0x4fe <_delay_ms>
     ed4:	e0 dc       	rcall	.-1600   	; 0x896 <isObstacleDetected>
     ed6:	81 30       	cpi	r24, 0x01	; 1
						_delay_ms(100); // Wait until obstacles pass
					}
					mode = 2; // Set mode to accelerating
     ed8:	d1 f3       	breq	.-12     	; 0xece <main+0x3b0>
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <mode>
				}

				// Increment stop count if all sensors are high
				if (allSensorsHigh == 1) {
     ee0:	01 30       	cpi	r16, 0x01	; 1
					if (millis() - previous_table_count_update_time > MIN_TIME_INTERVAL) {
     ee2:	51 f5       	brne	.+84     	; 0xf38 <main+0x41a>
     ee4:	01 db       	rcall	.-2558   	; 0x4e8 <millis>
     ee6:	00 91 22 02 	lds	r16, 0x0222	; 0x800222 <previous_table_count_update_time>
     eea:	10 91 23 02 	lds	r17, 0x0223	; 0x800223 <previous_table_count_update_time+0x1>
     eee:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <previous_table_count_update_time+0x2>
     ef2:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <previous_table_count_update_time+0x3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	80 1b       	sub	r24, r16
     efc:	91 0b       	sbc	r25, r17
     efe:	a2 0b       	sbc	r26, r18
     f00:	b3 0b       	sbc	r27, r19
     f02:	89 3e       	cpi	r24, 0xE9	; 233
     f04:	93 40       	sbci	r25, 0x03	; 3
     f06:	a1 05       	cpc	r26, r1
     f08:	b1 05       	cpc	r27, r1
     f0a:	70 f0       	brcs	.+28     	; 0xf28 <main+0x40a>
						table_count++;
     f0c:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <table_count>
     f10:	8f 5f       	subi	r24, 0xFF	; 255
     f12:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <table_count>
						previous_table_count_update_time = millis();
     f16:	e8 da       	rcall	.-2608   	; 0x4e8 <millis>
     f18:	60 93 22 02 	sts	0x0222, r22	; 0x800222 <previous_table_count_update_time>
     f1c:	70 93 23 02 	sts	0x0223, r23	; 0x800223 <previous_table_count_update_time+0x1>
     f20:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <previous_table_count_update_time+0x2>
     f24:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <previous_table_count_update_time+0x3>
					}
					if (stopCount >= stopCountThreshold) {
     f28:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stopCount>
     f2c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stopCount+0x1>
     f30:	0a 97       	sbiw	r24, 0x0a	; 10
						mode = 0; // Set mode to decelerating
     f32:	14 f0       	brlt	.+4      	; 0xf38 <main+0x41a>
     f34:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <mode>
					}
				}

				if (table_number == table_count){
     f38:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <table_number>
     f3c:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <table_count>
     f40:	98 13       	cpse	r25, r24
						uint8_t right_motor_speed = 0;

						// Decelerate the motors until they come to a stop
						uint8_t speedReached = 0;

						if (leftSpeedMPS > 0) {
     f42:	56 c0       	rjmp	.+172    	; 0xff0 <main+0x4d2>
     f44:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <leftSpeedMPS>
     f48:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <leftSpeedMPS+0x1>
     f4c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <leftSpeedMPS+0x2>
     f50:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <leftSpeedMPS+0x3>
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	a9 01       	movw	r20, r18
     f5a:	0b d2       	rcall	.+1046   	; 0x1372 <__gesf2>
     f5c:	18 16       	cp	r1, r24
							left_motor_speed -= (leftAccelerationMPS2 > -MAX_DECELERATION) ? 1 : 0;
     f5e:	a4 f4       	brge	.+40     	; 0xf88 <main+0x46a>
     f60:	d1 e0       	ldi	r29, 0x01	; 1
     f62:	28 e4       	ldi	r18, 0x48	; 72
     f64:	31 ee       	ldi	r19, 0xE1	; 225
     f66:	42 eb       	ldi	r20, 0xB2	; 178
     f68:	50 ec       	ldi	r21, 0xC0	; 192
     f6a:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <leftAccelerationMPS2>
     f6e:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <leftAccelerationMPS2+0x1>
     f72:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <leftAccelerationMPS2+0x2>
     f76:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <leftAccelerationMPS2+0x3>
     f7a:	fb d1       	rcall	.+1014   	; 0x1372 <__gesf2>
     f7c:	18 16       	cp	r1, r24
     f7e:	0c f0       	brlt	.+2      	; 0xf82 <main+0x464>
     f80:	d0 e0       	ldi	r29, 0x00	; 0
						// Control motor speed based on deceleration and speed
						uint8_t left_motor_speed = 0;
						uint8_t right_motor_speed = 0;

						// Decelerate the motors until they come to a stop
						uint8_t speedReached = 0;
     f82:	d1 95       	neg	r29
     f84:	10 e0       	ldi	r17, 0x00	; 0

						if (leftSpeedMPS > 0) {
							left_motor_speed -= (leftAccelerationMPS2 > -MAX_DECELERATION) ? 1 : 0;
							} else {
							left_motor_speed = 0;
							speedReached = 1;
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <main+0x46e>
						uint8_t speedReached = 0;

						if (leftSpeedMPS > 0) {
							left_motor_speed -= (leftAccelerationMPS2 > -MAX_DECELERATION) ? 1 : 0;
							} else {
							left_motor_speed = 0;
     f88:	11 e0       	ldi	r17, 0x01	; 1
							speedReached = 1;
						}

						if (rightSpeedMPS > 0) {
     f8a:	d0 e0       	ldi	r29, 0x00	; 0
     f8c:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <rightSpeedMPS>
     f90:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <rightSpeedMPS+0x1>
     f94:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <rightSpeedMPS+0x2>
     f98:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <rightSpeedMPS+0x3>
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	a9 01       	movw	r20, r18
							right_motor_speed -= (rightAccelerationMPS2 > -MAX_DECELERATION) ? 1 : 0;
     fa2:	e7 d1       	rcall	.+974    	; 0x1372 <__gesf2>
     fa4:	18 16       	cp	r1, r24
     fa6:	a4 f4       	brge	.+40     	; 0xfd0 <main+0x4b2>
     fa8:	c1 e0       	ldi	r28, 0x01	; 1
     faa:	28 e4       	ldi	r18, 0x48	; 72
     fac:	31 ee       	ldi	r19, 0xE1	; 225
     fae:	42 eb       	ldi	r20, 0xB2	; 178
     fb0:	50 ec       	ldi	r21, 0xC0	; 192
     fb2:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <rightAccelerationMPS2>
     fb6:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <rightAccelerationMPS2+0x1>
     fba:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <rightAccelerationMPS2+0x2>
     fbe:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <rightAccelerationMPS2+0x3>
     fc2:	d7 d1       	rcall	.+942    	; 0x1372 <__gesf2>
     fc4:	18 16       	cp	r1, r24
     fc6:	0c f0       	brlt	.+2      	; 0xfca <main+0x4ac>
     fc8:	c0 e0       	ldi	r28, 0x00	; 0
							} else {
							right_motor_speed = 0;
							speedReached = 1;
     fca:	6c 2f       	mov	r22, r28
						}

						if (rightSpeedMPS > 0) {
							right_motor_speed -= (rightAccelerationMPS2 > -MAX_DECELERATION) ? 1 : 0;
							} else {
							right_motor_speed = 0;
     fcc:	61 95       	neg	r22
							speedReached = 1;
						}

						// Set motor speeds
						setMotorSpeed(left_motor_speed, right_motor_speed);
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <main+0x4b6>
     fd0:	11 e0       	ldi	r17, 0x01	; 1
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	8d 2f       	mov	r24, r29
						if (speedReached == 1) {
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a5 d8       	rcall	.-3766   	; 0x126 <setMotorSpeed>
     fdc:	11 30       	cpi	r17, 0x01	; 1
							mode = 1; // Set mode to normal operation
     fde:	09 f0       	breq	.+2      	; 0xfe2 <main+0x4c4>
     fe0:	b1 cf       	rjmp	.-158    	; 0xf44 <main+0x426>
     fe2:	c1 e0       	ldi	r28, 0x01	; 1
							break;
						}
						speedReached = 0; //break the deceleration loop when speed has gotten to zero
					}
					turnBend(90);    // Turn 90 degrees
     fe4:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <mode>
     fe8:	8a e5       	ldi	r24, 0x5A	; 90
					serving_state = 1; // Set the serving state to true
     fea:	ad da       	rcall	.-2726   	; 0x546 <turnBend>
     fec:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <__DATA_REGION_ORIGIN__>
				}

				PID_travel(weightedSum);
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	cd dc       	rcall	.-1638   	; 0x98e <PID_travel>
     ff4:	be cd       	rjmp	.-1156   	; 0xb72 <main+0x54>
			}
			} else {
			//set 7 segment display to 0
			display_digit(0);
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	68 dc       	rcall	.-1840   	; 0x8ca <display_digit>
     ffa:	bb cd       	rjmp	.-1162   	; 0xb72 <main+0x54>
		}
	}
     ffc:	80 e0       	ldi	r24, 0x00	; 0

	return 0;
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	08 95       	ret

0000100a <__subsf3>:
    100a:	50 58       	subi	r21, 0x80	; 128

0000100c <__addsf3>:
    100c:	bb 27       	eor	r27, r27
    100e:	aa 27       	eor	r26, r26
    1010:	0e d0       	rcall	.+28     	; 0x102e <__addsf3x>
    1012:	75 c1       	rjmp	.+746    	; 0x12fe <__fp_round>
    1014:	66 d1       	rcall	.+716    	; 0x12e2 <__fp_pscA>
    1016:	30 f0       	brcs	.+12     	; 0x1024 <__addsf3+0x18>
    1018:	6b d1       	rcall	.+726    	; 0x12f0 <__fp_pscB>
    101a:	20 f0       	brcs	.+8      	; 0x1024 <__addsf3+0x18>
    101c:	31 f4       	brne	.+12     	; 0x102a <__addsf3+0x1e>
    101e:	9f 3f       	cpi	r25, 0xFF	; 255
    1020:	11 f4       	brne	.+4      	; 0x1026 <__addsf3+0x1a>
    1022:	1e f4       	brtc	.+6      	; 0x102a <__addsf3+0x1e>
    1024:	5b c1       	rjmp	.+694    	; 0x12dc <__fp_nan>
    1026:	0e f4       	brtc	.+2      	; 0x102a <__addsf3+0x1e>
    1028:	e0 95       	com	r30
    102a:	e7 fb       	bst	r30, 7
    102c:	51 c1       	rjmp	.+674    	; 0x12d0 <__fp_inf>

0000102e <__addsf3x>:
    102e:	e9 2f       	mov	r30, r25
    1030:	77 d1       	rcall	.+750    	; 0x1320 <__fp_split3>
    1032:	80 f3       	brcs	.-32     	; 0x1014 <__addsf3+0x8>
    1034:	ba 17       	cp	r27, r26
    1036:	62 07       	cpc	r22, r18
    1038:	73 07       	cpc	r23, r19
    103a:	84 07       	cpc	r24, r20
    103c:	95 07       	cpc	r25, r21
    103e:	18 f0       	brcs	.+6      	; 0x1046 <__addsf3x+0x18>
    1040:	71 f4       	brne	.+28     	; 0x105e <__addsf3x+0x30>
    1042:	9e f5       	brtc	.+102    	; 0x10aa <__addsf3x+0x7c>
    1044:	8f c1       	rjmp	.+798    	; 0x1364 <__fp_zero>
    1046:	0e f4       	brtc	.+2      	; 0x104a <__addsf3x+0x1c>
    1048:	e0 95       	com	r30
    104a:	0b 2e       	mov	r0, r27
    104c:	ba 2f       	mov	r27, r26
    104e:	a0 2d       	mov	r26, r0
    1050:	0b 01       	movw	r0, r22
    1052:	b9 01       	movw	r22, r18
    1054:	90 01       	movw	r18, r0
    1056:	0c 01       	movw	r0, r24
    1058:	ca 01       	movw	r24, r20
    105a:	a0 01       	movw	r20, r0
    105c:	11 24       	eor	r1, r1
    105e:	ff 27       	eor	r31, r31
    1060:	59 1b       	sub	r21, r25
    1062:	99 f0       	breq	.+38     	; 0x108a <__addsf3x+0x5c>
    1064:	59 3f       	cpi	r21, 0xF9	; 249
    1066:	50 f4       	brcc	.+20     	; 0x107c <__addsf3x+0x4e>
    1068:	50 3e       	cpi	r21, 0xE0	; 224
    106a:	68 f1       	brcs	.+90     	; 0x10c6 <__addsf3x+0x98>
    106c:	1a 16       	cp	r1, r26
    106e:	f0 40       	sbci	r31, 0x00	; 0
    1070:	a2 2f       	mov	r26, r18
    1072:	23 2f       	mov	r18, r19
    1074:	34 2f       	mov	r19, r20
    1076:	44 27       	eor	r20, r20
    1078:	58 5f       	subi	r21, 0xF8	; 248
    107a:	f3 cf       	rjmp	.-26     	; 0x1062 <__addsf3x+0x34>
    107c:	46 95       	lsr	r20
    107e:	37 95       	ror	r19
    1080:	27 95       	ror	r18
    1082:	a7 95       	ror	r26
    1084:	f0 40       	sbci	r31, 0x00	; 0
    1086:	53 95       	inc	r21
    1088:	c9 f7       	brne	.-14     	; 0x107c <__addsf3x+0x4e>
    108a:	7e f4       	brtc	.+30     	; 0x10aa <__addsf3x+0x7c>
    108c:	1f 16       	cp	r1, r31
    108e:	ba 0b       	sbc	r27, r26
    1090:	62 0b       	sbc	r22, r18
    1092:	73 0b       	sbc	r23, r19
    1094:	84 0b       	sbc	r24, r20
    1096:	ba f0       	brmi	.+46     	; 0x10c6 <__addsf3x+0x98>
    1098:	91 50       	subi	r25, 0x01	; 1
    109a:	a1 f0       	breq	.+40     	; 0x10c4 <__addsf3x+0x96>
    109c:	ff 0f       	add	r31, r31
    109e:	bb 1f       	adc	r27, r27
    10a0:	66 1f       	adc	r22, r22
    10a2:	77 1f       	adc	r23, r23
    10a4:	88 1f       	adc	r24, r24
    10a6:	c2 f7       	brpl	.-16     	; 0x1098 <__addsf3x+0x6a>
    10a8:	0e c0       	rjmp	.+28     	; 0x10c6 <__addsf3x+0x98>
    10aa:	ba 0f       	add	r27, r26
    10ac:	62 1f       	adc	r22, r18
    10ae:	73 1f       	adc	r23, r19
    10b0:	84 1f       	adc	r24, r20
    10b2:	48 f4       	brcc	.+18     	; 0x10c6 <__addsf3x+0x98>
    10b4:	87 95       	ror	r24
    10b6:	77 95       	ror	r23
    10b8:	67 95       	ror	r22
    10ba:	b7 95       	ror	r27
    10bc:	f7 95       	ror	r31
    10be:	9e 3f       	cpi	r25, 0xFE	; 254
    10c0:	08 f0       	brcs	.+2      	; 0x10c4 <__addsf3x+0x96>
    10c2:	b3 cf       	rjmp	.-154    	; 0x102a <__addsf3+0x1e>
    10c4:	93 95       	inc	r25
    10c6:	88 0f       	add	r24, r24
    10c8:	08 f0       	brcs	.+2      	; 0x10cc <__addsf3x+0x9e>
    10ca:	99 27       	eor	r25, r25
    10cc:	ee 0f       	add	r30, r30
    10ce:	97 95       	ror	r25
    10d0:	87 95       	ror	r24
    10d2:	08 95       	ret

000010d4 <__cmpsf2>:
    10d4:	d9 d0       	rcall	.+434    	; 0x1288 <__fp_cmp>
    10d6:	08 f4       	brcc	.+2      	; 0x10da <__cmpsf2+0x6>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	08 95       	ret

000010dc <__divsf3>:
    10dc:	0c d0       	rcall	.+24     	; 0x10f6 <__divsf3x>
    10de:	0f c1       	rjmp	.+542    	; 0x12fe <__fp_round>
    10e0:	07 d1       	rcall	.+526    	; 0x12f0 <__fp_pscB>
    10e2:	40 f0       	brcs	.+16     	; 0x10f4 <__divsf3+0x18>
    10e4:	fe d0       	rcall	.+508    	; 0x12e2 <__fp_pscA>
    10e6:	30 f0       	brcs	.+12     	; 0x10f4 <__divsf3+0x18>
    10e8:	21 f4       	brne	.+8      	; 0x10f2 <__divsf3+0x16>
    10ea:	5f 3f       	cpi	r21, 0xFF	; 255
    10ec:	19 f0       	breq	.+6      	; 0x10f4 <__divsf3+0x18>
    10ee:	f0 c0       	rjmp	.+480    	; 0x12d0 <__fp_inf>
    10f0:	51 11       	cpse	r21, r1
    10f2:	39 c1       	rjmp	.+626    	; 0x1366 <__fp_szero>
    10f4:	f3 c0       	rjmp	.+486    	; 0x12dc <__fp_nan>

000010f6 <__divsf3x>:
    10f6:	14 d1       	rcall	.+552    	; 0x1320 <__fp_split3>
    10f8:	98 f3       	brcs	.-26     	; 0x10e0 <__divsf3+0x4>

000010fa <__divsf3_pse>:
    10fa:	99 23       	and	r25, r25
    10fc:	c9 f3       	breq	.-14     	; 0x10f0 <__divsf3+0x14>
    10fe:	55 23       	and	r21, r21
    1100:	b1 f3       	breq	.-20     	; 0x10ee <__divsf3+0x12>
    1102:	95 1b       	sub	r25, r21
    1104:	55 0b       	sbc	r21, r21
    1106:	bb 27       	eor	r27, r27
    1108:	aa 27       	eor	r26, r26
    110a:	62 17       	cp	r22, r18
    110c:	73 07       	cpc	r23, r19
    110e:	84 07       	cpc	r24, r20
    1110:	38 f0       	brcs	.+14     	; 0x1120 <__divsf3_pse+0x26>
    1112:	9f 5f       	subi	r25, 0xFF	; 255
    1114:	5f 4f       	sbci	r21, 0xFF	; 255
    1116:	22 0f       	add	r18, r18
    1118:	33 1f       	adc	r19, r19
    111a:	44 1f       	adc	r20, r20
    111c:	aa 1f       	adc	r26, r26
    111e:	a9 f3       	breq	.-22     	; 0x110a <__divsf3_pse+0x10>
    1120:	33 d0       	rcall	.+102    	; 0x1188 <__divsf3_pse+0x8e>
    1122:	0e 2e       	mov	r0, r30
    1124:	3a f0       	brmi	.+14     	; 0x1134 <__divsf3_pse+0x3a>
    1126:	e0 e8       	ldi	r30, 0x80	; 128
    1128:	30 d0       	rcall	.+96     	; 0x118a <__divsf3_pse+0x90>
    112a:	91 50       	subi	r25, 0x01	; 1
    112c:	50 40       	sbci	r21, 0x00	; 0
    112e:	e6 95       	lsr	r30
    1130:	00 1c       	adc	r0, r0
    1132:	ca f7       	brpl	.-14     	; 0x1126 <__divsf3_pse+0x2c>
    1134:	29 d0       	rcall	.+82     	; 0x1188 <__divsf3_pse+0x8e>
    1136:	fe 2f       	mov	r31, r30
    1138:	27 d0       	rcall	.+78     	; 0x1188 <__divsf3_pse+0x8e>
    113a:	66 0f       	add	r22, r22
    113c:	77 1f       	adc	r23, r23
    113e:	88 1f       	adc	r24, r24
    1140:	bb 1f       	adc	r27, r27
    1142:	26 17       	cp	r18, r22
    1144:	37 07       	cpc	r19, r23
    1146:	48 07       	cpc	r20, r24
    1148:	ab 07       	cpc	r26, r27
    114a:	b0 e8       	ldi	r27, 0x80	; 128
    114c:	09 f0       	breq	.+2      	; 0x1150 <__divsf3_pse+0x56>
    114e:	bb 0b       	sbc	r27, r27
    1150:	80 2d       	mov	r24, r0
    1152:	bf 01       	movw	r22, r30
    1154:	ff 27       	eor	r31, r31
    1156:	93 58       	subi	r25, 0x83	; 131
    1158:	5f 4f       	sbci	r21, 0xFF	; 255
    115a:	2a f0       	brmi	.+10     	; 0x1166 <__divsf3_pse+0x6c>
    115c:	9e 3f       	cpi	r25, 0xFE	; 254
    115e:	51 05       	cpc	r21, r1
    1160:	68 f0       	brcs	.+26     	; 0x117c <__divsf3_pse+0x82>
    1162:	b6 c0       	rjmp	.+364    	; 0x12d0 <__fp_inf>
    1164:	00 c1       	rjmp	.+512    	; 0x1366 <__fp_szero>
    1166:	5f 3f       	cpi	r21, 0xFF	; 255
    1168:	ec f3       	brlt	.-6      	; 0x1164 <__divsf3_pse+0x6a>
    116a:	98 3e       	cpi	r25, 0xE8	; 232
    116c:	dc f3       	brlt	.-10     	; 0x1164 <__divsf3_pse+0x6a>
    116e:	86 95       	lsr	r24
    1170:	77 95       	ror	r23
    1172:	67 95       	ror	r22
    1174:	b7 95       	ror	r27
    1176:	f7 95       	ror	r31
    1178:	9f 5f       	subi	r25, 0xFF	; 255
    117a:	c9 f7       	brne	.-14     	; 0x116e <__divsf3_pse+0x74>
    117c:	88 0f       	add	r24, r24
    117e:	91 1d       	adc	r25, r1
    1180:	96 95       	lsr	r25
    1182:	87 95       	ror	r24
    1184:	97 f9       	bld	r25, 7
    1186:	08 95       	ret
    1188:	e1 e0       	ldi	r30, 0x01	; 1
    118a:	66 0f       	add	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	bb 1f       	adc	r27, r27
    1192:	62 17       	cp	r22, r18
    1194:	73 07       	cpc	r23, r19
    1196:	84 07       	cpc	r24, r20
    1198:	ba 07       	cpc	r27, r26
    119a:	20 f0       	brcs	.+8      	; 0x11a4 <__divsf3_pse+0xaa>
    119c:	62 1b       	sub	r22, r18
    119e:	73 0b       	sbc	r23, r19
    11a0:	84 0b       	sbc	r24, r20
    11a2:	ba 0b       	sbc	r27, r26
    11a4:	ee 1f       	adc	r30, r30
    11a6:	88 f7       	brcc	.-30     	; 0x118a <__divsf3_pse+0x90>
    11a8:	e0 95       	com	r30
    11aa:	08 95       	ret

000011ac <__fixsfsi>:
    11ac:	04 d0       	rcall	.+8      	; 0x11b6 <__fixunssfsi>
    11ae:	68 94       	set
    11b0:	b1 11       	cpse	r27, r1
    11b2:	d9 c0       	rjmp	.+434    	; 0x1366 <__fp_szero>
    11b4:	08 95       	ret

000011b6 <__fixunssfsi>:
    11b6:	bc d0       	rcall	.+376    	; 0x1330 <__fp_splitA>
    11b8:	88 f0       	brcs	.+34     	; 0x11dc <__fixunssfsi+0x26>
    11ba:	9f 57       	subi	r25, 0x7F	; 127
    11bc:	90 f0       	brcs	.+36     	; 0x11e2 <__fixunssfsi+0x2c>
    11be:	b9 2f       	mov	r27, r25
    11c0:	99 27       	eor	r25, r25
    11c2:	b7 51       	subi	r27, 0x17	; 23
    11c4:	a0 f0       	brcs	.+40     	; 0x11ee <__fixunssfsi+0x38>
    11c6:	d1 f0       	breq	.+52     	; 0x11fc <__fixunssfsi+0x46>
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	1a f0       	brmi	.+6      	; 0x11d8 <__fixunssfsi+0x22>
    11d2:	ba 95       	dec	r27
    11d4:	c9 f7       	brne	.-14     	; 0x11c8 <__fixunssfsi+0x12>
    11d6:	12 c0       	rjmp	.+36     	; 0x11fc <__fixunssfsi+0x46>
    11d8:	b1 30       	cpi	r27, 0x01	; 1
    11da:	81 f0       	breq	.+32     	; 0x11fc <__fixunssfsi+0x46>
    11dc:	c3 d0       	rcall	.+390    	; 0x1364 <__fp_zero>
    11de:	b1 e0       	ldi	r27, 0x01	; 1
    11e0:	08 95       	ret
    11e2:	c0 c0       	rjmp	.+384    	; 0x1364 <__fp_zero>
    11e4:	67 2f       	mov	r22, r23
    11e6:	78 2f       	mov	r23, r24
    11e8:	88 27       	eor	r24, r24
    11ea:	b8 5f       	subi	r27, 0xF8	; 248
    11ec:	39 f0       	breq	.+14     	; 0x11fc <__fixunssfsi+0x46>
    11ee:	b9 3f       	cpi	r27, 0xF9	; 249
    11f0:	cc f3       	brlt	.-14     	; 0x11e4 <__fixunssfsi+0x2e>
    11f2:	86 95       	lsr	r24
    11f4:	77 95       	ror	r23
    11f6:	67 95       	ror	r22
    11f8:	b3 95       	inc	r27
    11fa:	d9 f7       	brne	.-10     	; 0x11f2 <__fixunssfsi+0x3c>
    11fc:	3e f4       	brtc	.+14     	; 0x120c <__fixunssfsi+0x56>
    11fe:	90 95       	com	r25
    1200:	80 95       	com	r24
    1202:	70 95       	com	r23
    1204:	61 95       	neg	r22
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	8f 4f       	sbci	r24, 0xFF	; 255
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	08 95       	ret

0000120e <__floatunsisf>:
    120e:	e8 94       	clt
    1210:	09 c0       	rjmp	.+18     	; 0x1224 <__floatsisf+0x12>

00001212 <__floatsisf>:
    1212:	97 fb       	bst	r25, 7
    1214:	3e f4       	brtc	.+14     	; 0x1224 <__floatsisf+0x12>
    1216:	90 95       	com	r25
    1218:	80 95       	com	r24
    121a:	70 95       	com	r23
    121c:	61 95       	neg	r22
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	8f 4f       	sbci	r24, 0xFF	; 255
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	99 23       	and	r25, r25
    1226:	a9 f0       	breq	.+42     	; 0x1252 <__floatsisf+0x40>
    1228:	f9 2f       	mov	r31, r25
    122a:	96 e9       	ldi	r25, 0x96	; 150
    122c:	bb 27       	eor	r27, r27
    122e:	93 95       	inc	r25
    1230:	f6 95       	lsr	r31
    1232:	87 95       	ror	r24
    1234:	77 95       	ror	r23
    1236:	67 95       	ror	r22
    1238:	b7 95       	ror	r27
    123a:	f1 11       	cpse	r31, r1
    123c:	f8 cf       	rjmp	.-16     	; 0x122e <__floatsisf+0x1c>
    123e:	fa f4       	brpl	.+62     	; 0x127e <__floatsisf+0x6c>
    1240:	bb 0f       	add	r27, r27
    1242:	11 f4       	brne	.+4      	; 0x1248 <__floatsisf+0x36>
    1244:	60 ff       	sbrs	r22, 0
    1246:	1b c0       	rjmp	.+54     	; 0x127e <__floatsisf+0x6c>
    1248:	6f 5f       	subi	r22, 0xFF	; 255
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	8f 4f       	sbci	r24, 0xFF	; 255
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	16 c0       	rjmp	.+44     	; 0x127e <__floatsisf+0x6c>
    1252:	88 23       	and	r24, r24
    1254:	11 f0       	breq	.+4      	; 0x125a <__floatsisf+0x48>
    1256:	96 e9       	ldi	r25, 0x96	; 150
    1258:	11 c0       	rjmp	.+34     	; 0x127c <__floatsisf+0x6a>
    125a:	77 23       	and	r23, r23
    125c:	21 f0       	breq	.+8      	; 0x1266 <__floatsisf+0x54>
    125e:	9e e8       	ldi	r25, 0x8E	; 142
    1260:	87 2f       	mov	r24, r23
    1262:	76 2f       	mov	r23, r22
    1264:	05 c0       	rjmp	.+10     	; 0x1270 <__floatsisf+0x5e>
    1266:	66 23       	and	r22, r22
    1268:	71 f0       	breq	.+28     	; 0x1286 <__floatsisf+0x74>
    126a:	96 e8       	ldi	r25, 0x86	; 134
    126c:	86 2f       	mov	r24, r22
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	2a f0       	brmi	.+10     	; 0x127e <__floatsisf+0x6c>
    1274:	9a 95       	dec	r25
    1276:	66 0f       	add	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	da f7       	brpl	.-10     	; 0x1274 <__floatsisf+0x62>
    127e:	88 0f       	add	r24, r24
    1280:	96 95       	lsr	r25
    1282:	87 95       	ror	r24
    1284:	97 f9       	bld	r25, 7
    1286:	08 95       	ret

00001288 <__fp_cmp>:
    1288:	99 0f       	add	r25, r25
    128a:	00 08       	sbc	r0, r0
    128c:	55 0f       	add	r21, r21
    128e:	aa 0b       	sbc	r26, r26
    1290:	e0 e8       	ldi	r30, 0x80	; 128
    1292:	fe ef       	ldi	r31, 0xFE	; 254
    1294:	16 16       	cp	r1, r22
    1296:	17 06       	cpc	r1, r23
    1298:	e8 07       	cpc	r30, r24
    129a:	f9 07       	cpc	r31, r25
    129c:	c0 f0       	brcs	.+48     	; 0x12ce <__fp_cmp+0x46>
    129e:	12 16       	cp	r1, r18
    12a0:	13 06       	cpc	r1, r19
    12a2:	e4 07       	cpc	r30, r20
    12a4:	f5 07       	cpc	r31, r21
    12a6:	98 f0       	brcs	.+38     	; 0x12ce <__fp_cmp+0x46>
    12a8:	62 1b       	sub	r22, r18
    12aa:	73 0b       	sbc	r23, r19
    12ac:	84 0b       	sbc	r24, r20
    12ae:	95 0b       	sbc	r25, r21
    12b0:	39 f4       	brne	.+14     	; 0x12c0 <__fp_cmp+0x38>
    12b2:	0a 26       	eor	r0, r26
    12b4:	61 f0       	breq	.+24     	; 0x12ce <__fp_cmp+0x46>
    12b6:	23 2b       	or	r18, r19
    12b8:	24 2b       	or	r18, r20
    12ba:	25 2b       	or	r18, r21
    12bc:	21 f4       	brne	.+8      	; 0x12c6 <__fp_cmp+0x3e>
    12be:	08 95       	ret
    12c0:	0a 26       	eor	r0, r26
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <__fp_cmp+0x3e>
    12c4:	a1 40       	sbci	r26, 0x01	; 1
    12c6:	a6 95       	lsr	r26
    12c8:	8f ef       	ldi	r24, 0xFF	; 255
    12ca:	81 1d       	adc	r24, r1
    12cc:	81 1d       	adc	r24, r1
    12ce:	08 95       	ret

000012d0 <__fp_inf>:
    12d0:	97 f9       	bld	r25, 7
    12d2:	9f 67       	ori	r25, 0x7F	; 127
    12d4:	80 e8       	ldi	r24, 0x80	; 128
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	08 95       	ret

000012dc <__fp_nan>:
    12dc:	9f ef       	ldi	r25, 0xFF	; 255
    12de:	80 ec       	ldi	r24, 0xC0	; 192
    12e0:	08 95       	ret

000012e2 <__fp_pscA>:
    12e2:	00 24       	eor	r0, r0
    12e4:	0a 94       	dec	r0
    12e6:	16 16       	cp	r1, r22
    12e8:	17 06       	cpc	r1, r23
    12ea:	18 06       	cpc	r1, r24
    12ec:	09 06       	cpc	r0, r25
    12ee:	08 95       	ret

000012f0 <__fp_pscB>:
    12f0:	00 24       	eor	r0, r0
    12f2:	0a 94       	dec	r0
    12f4:	12 16       	cp	r1, r18
    12f6:	13 06       	cpc	r1, r19
    12f8:	14 06       	cpc	r1, r20
    12fa:	05 06       	cpc	r0, r21
    12fc:	08 95       	ret

000012fe <__fp_round>:
    12fe:	09 2e       	mov	r0, r25
    1300:	03 94       	inc	r0
    1302:	00 0c       	add	r0, r0
    1304:	11 f4       	brne	.+4      	; 0x130a <__fp_round+0xc>
    1306:	88 23       	and	r24, r24
    1308:	52 f0       	brmi	.+20     	; 0x131e <__fp_round+0x20>
    130a:	bb 0f       	add	r27, r27
    130c:	40 f4       	brcc	.+16     	; 0x131e <__fp_round+0x20>
    130e:	bf 2b       	or	r27, r31
    1310:	11 f4       	brne	.+4      	; 0x1316 <__fp_round+0x18>
    1312:	60 ff       	sbrs	r22, 0
    1314:	04 c0       	rjmp	.+8      	; 0x131e <__fp_round+0x20>
    1316:	6f 5f       	subi	r22, 0xFF	; 255
    1318:	7f 4f       	sbci	r23, 0xFF	; 255
    131a:	8f 4f       	sbci	r24, 0xFF	; 255
    131c:	9f 4f       	sbci	r25, 0xFF	; 255
    131e:	08 95       	ret

00001320 <__fp_split3>:
    1320:	57 fd       	sbrc	r21, 7
    1322:	90 58       	subi	r25, 0x80	; 128
    1324:	44 0f       	add	r20, r20
    1326:	55 1f       	adc	r21, r21
    1328:	59 f0       	breq	.+22     	; 0x1340 <__fp_splitA+0x10>
    132a:	5f 3f       	cpi	r21, 0xFF	; 255
    132c:	71 f0       	breq	.+28     	; 0x134a <__fp_splitA+0x1a>
    132e:	47 95       	ror	r20

00001330 <__fp_splitA>:
    1330:	88 0f       	add	r24, r24
    1332:	97 fb       	bst	r25, 7
    1334:	99 1f       	adc	r25, r25
    1336:	61 f0       	breq	.+24     	; 0x1350 <__fp_splitA+0x20>
    1338:	9f 3f       	cpi	r25, 0xFF	; 255
    133a:	79 f0       	breq	.+30     	; 0x135a <__fp_splitA+0x2a>
    133c:	87 95       	ror	r24
    133e:	08 95       	ret
    1340:	12 16       	cp	r1, r18
    1342:	13 06       	cpc	r1, r19
    1344:	14 06       	cpc	r1, r20
    1346:	55 1f       	adc	r21, r21
    1348:	f2 cf       	rjmp	.-28     	; 0x132e <__fp_split3+0xe>
    134a:	46 95       	lsr	r20
    134c:	f1 df       	rcall	.-30     	; 0x1330 <__fp_splitA>
    134e:	08 c0       	rjmp	.+16     	; 0x1360 <__fp_splitA+0x30>
    1350:	16 16       	cp	r1, r22
    1352:	17 06       	cpc	r1, r23
    1354:	18 06       	cpc	r1, r24
    1356:	99 1f       	adc	r25, r25
    1358:	f1 cf       	rjmp	.-30     	; 0x133c <__fp_splitA+0xc>
    135a:	86 95       	lsr	r24
    135c:	71 05       	cpc	r23, r1
    135e:	61 05       	cpc	r22, r1
    1360:	08 94       	sec
    1362:	08 95       	ret

00001364 <__fp_zero>:
    1364:	e8 94       	clt

00001366 <__fp_szero>:
    1366:	bb 27       	eor	r27, r27
    1368:	66 27       	eor	r22, r22
    136a:	77 27       	eor	r23, r23
    136c:	cb 01       	movw	r24, r22
    136e:	97 f9       	bld	r25, 7
    1370:	08 95       	ret

00001372 <__gesf2>:
    1372:	8a df       	rcall	.-236    	; 0x1288 <__fp_cmp>
    1374:	08 f4       	brcc	.+2      	; 0x1378 <__gesf2+0x6>
    1376:	8f ef       	ldi	r24, 0xFF	; 255
    1378:	08 95       	ret

0000137a <__mulsf3>:
    137a:	0b d0       	rcall	.+22     	; 0x1392 <__mulsf3x>
    137c:	c0 cf       	rjmp	.-128    	; 0x12fe <__fp_round>
    137e:	b1 df       	rcall	.-158    	; 0x12e2 <__fp_pscA>
    1380:	28 f0       	brcs	.+10     	; 0x138c <__mulsf3+0x12>
    1382:	b6 df       	rcall	.-148    	; 0x12f0 <__fp_pscB>
    1384:	18 f0       	brcs	.+6      	; 0x138c <__mulsf3+0x12>
    1386:	95 23       	and	r25, r21
    1388:	09 f0       	breq	.+2      	; 0x138c <__mulsf3+0x12>
    138a:	a2 cf       	rjmp	.-188    	; 0x12d0 <__fp_inf>
    138c:	a7 cf       	rjmp	.-178    	; 0x12dc <__fp_nan>
    138e:	11 24       	eor	r1, r1
    1390:	ea cf       	rjmp	.-44     	; 0x1366 <__fp_szero>

00001392 <__mulsf3x>:
    1392:	c6 df       	rcall	.-116    	; 0x1320 <__fp_split3>
    1394:	a0 f3       	brcs	.-24     	; 0x137e <__mulsf3+0x4>

00001396 <__mulsf3_pse>:
    1396:	95 9f       	mul	r25, r21
    1398:	d1 f3       	breq	.-12     	; 0x138e <__mulsf3+0x14>
    139a:	95 0f       	add	r25, r21
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	55 1f       	adc	r21, r21
    13a0:	62 9f       	mul	r22, r18
    13a2:	f0 01       	movw	r30, r0
    13a4:	72 9f       	mul	r23, r18
    13a6:	bb 27       	eor	r27, r27
    13a8:	f0 0d       	add	r31, r0
    13aa:	b1 1d       	adc	r27, r1
    13ac:	63 9f       	mul	r22, r19
    13ae:	aa 27       	eor	r26, r26
    13b0:	f0 0d       	add	r31, r0
    13b2:	b1 1d       	adc	r27, r1
    13b4:	aa 1f       	adc	r26, r26
    13b6:	64 9f       	mul	r22, r20
    13b8:	66 27       	eor	r22, r22
    13ba:	b0 0d       	add	r27, r0
    13bc:	a1 1d       	adc	r26, r1
    13be:	66 1f       	adc	r22, r22
    13c0:	82 9f       	mul	r24, r18
    13c2:	22 27       	eor	r18, r18
    13c4:	b0 0d       	add	r27, r0
    13c6:	a1 1d       	adc	r26, r1
    13c8:	62 1f       	adc	r22, r18
    13ca:	73 9f       	mul	r23, r19
    13cc:	b0 0d       	add	r27, r0
    13ce:	a1 1d       	adc	r26, r1
    13d0:	62 1f       	adc	r22, r18
    13d2:	83 9f       	mul	r24, r19
    13d4:	a0 0d       	add	r26, r0
    13d6:	61 1d       	adc	r22, r1
    13d8:	22 1f       	adc	r18, r18
    13da:	74 9f       	mul	r23, r20
    13dc:	33 27       	eor	r19, r19
    13de:	a0 0d       	add	r26, r0
    13e0:	61 1d       	adc	r22, r1
    13e2:	23 1f       	adc	r18, r19
    13e4:	84 9f       	mul	r24, r20
    13e6:	60 0d       	add	r22, r0
    13e8:	21 1d       	adc	r18, r1
    13ea:	82 2f       	mov	r24, r18
    13ec:	76 2f       	mov	r23, r22
    13ee:	6a 2f       	mov	r22, r26
    13f0:	11 24       	eor	r1, r1
    13f2:	9f 57       	subi	r25, 0x7F	; 127
    13f4:	50 40       	sbci	r21, 0x00	; 0
    13f6:	8a f0       	brmi	.+34     	; 0x141a <__mulsf3_pse+0x84>
    13f8:	e1 f0       	breq	.+56     	; 0x1432 <__mulsf3_pse+0x9c>
    13fa:	88 23       	and	r24, r24
    13fc:	4a f0       	brmi	.+18     	; 0x1410 <__mulsf3_pse+0x7a>
    13fe:	ee 0f       	add	r30, r30
    1400:	ff 1f       	adc	r31, r31
    1402:	bb 1f       	adc	r27, r27
    1404:	66 1f       	adc	r22, r22
    1406:	77 1f       	adc	r23, r23
    1408:	88 1f       	adc	r24, r24
    140a:	91 50       	subi	r25, 0x01	; 1
    140c:	50 40       	sbci	r21, 0x00	; 0
    140e:	a9 f7       	brne	.-22     	; 0x13fa <__mulsf3_pse+0x64>
    1410:	9e 3f       	cpi	r25, 0xFE	; 254
    1412:	51 05       	cpc	r21, r1
    1414:	70 f0       	brcs	.+28     	; 0x1432 <__mulsf3_pse+0x9c>
    1416:	5c cf       	rjmp	.-328    	; 0x12d0 <__fp_inf>
    1418:	a6 cf       	rjmp	.-180    	; 0x1366 <__fp_szero>
    141a:	5f 3f       	cpi	r21, 0xFF	; 255
    141c:	ec f3       	brlt	.-6      	; 0x1418 <__mulsf3_pse+0x82>
    141e:	98 3e       	cpi	r25, 0xE8	; 232
    1420:	dc f3       	brlt	.-10     	; 0x1418 <__mulsf3_pse+0x82>
    1422:	86 95       	lsr	r24
    1424:	77 95       	ror	r23
    1426:	67 95       	ror	r22
    1428:	b7 95       	ror	r27
    142a:	f7 95       	ror	r31
    142c:	e7 95       	ror	r30
    142e:	9f 5f       	subi	r25, 0xFF	; 255
    1430:	c1 f7       	brne	.-16     	; 0x1422 <__mulsf3_pse+0x8c>
    1432:	fe 2b       	or	r31, r30
    1434:	88 0f       	add	r24, r24
    1436:	91 1d       	adc	r25, r1
    1438:	96 95       	lsr	r25
    143a:	87 95       	ror	r24
    143c:	97 f9       	bld	r25, 7
    143e:	08 95       	ret

00001440 <__divmodsi4>:
    1440:	05 2e       	mov	r0, r21
    1442:	97 fb       	bst	r25, 7
    1444:	16 f4       	brtc	.+4      	; 0x144a <__divmodsi4+0xa>
    1446:	00 94       	com	r0
    1448:	0f d0       	rcall	.+30     	; 0x1468 <__negsi2>
    144a:	57 fd       	sbrc	r21, 7
    144c:	05 d0       	rcall	.+10     	; 0x1458 <__divmodsi4_neg2>
    144e:	2d d0       	rcall	.+90     	; 0x14aa <__udivmodsi4>
    1450:	07 fc       	sbrc	r0, 7
    1452:	02 d0       	rcall	.+4      	; 0x1458 <__divmodsi4_neg2>
    1454:	46 f4       	brtc	.+16     	; 0x1466 <__divmodsi4_exit>
    1456:	08 c0       	rjmp	.+16     	; 0x1468 <__negsi2>

00001458 <__divmodsi4_neg2>:
    1458:	50 95       	com	r21
    145a:	40 95       	com	r20
    145c:	30 95       	com	r19
    145e:	21 95       	neg	r18
    1460:	3f 4f       	sbci	r19, 0xFF	; 255
    1462:	4f 4f       	sbci	r20, 0xFF	; 255
    1464:	5f 4f       	sbci	r21, 0xFF	; 255

00001466 <__divmodsi4_exit>:
    1466:	08 95       	ret

00001468 <__negsi2>:
    1468:	90 95       	com	r25
    146a:	80 95       	com	r24
    146c:	70 95       	com	r23
    146e:	61 95       	neg	r22
    1470:	7f 4f       	sbci	r23, 0xFF	; 255
    1472:	8f 4f       	sbci	r24, 0xFF	; 255
    1474:	9f 4f       	sbci	r25, 0xFF	; 255
    1476:	08 95       	ret

00001478 <__umulhisi3>:
    1478:	a2 9f       	mul	r26, r18
    147a:	b0 01       	movw	r22, r0
    147c:	b3 9f       	mul	r27, r19
    147e:	c0 01       	movw	r24, r0
    1480:	a3 9f       	mul	r26, r19
    1482:	70 0d       	add	r23, r0
    1484:	81 1d       	adc	r24, r1
    1486:	11 24       	eor	r1, r1
    1488:	91 1d       	adc	r25, r1
    148a:	b2 9f       	mul	r27, r18
    148c:	70 0d       	add	r23, r0
    148e:	81 1d       	adc	r24, r1
    1490:	11 24       	eor	r1, r1
    1492:	91 1d       	adc	r25, r1
    1494:	08 95       	ret

00001496 <__muluhisi3>:
    1496:	f0 df       	rcall	.-32     	; 0x1478 <__umulhisi3>
    1498:	a5 9f       	mul	r26, r21
    149a:	90 0d       	add	r25, r0
    149c:	b4 9f       	mul	r27, r20
    149e:	90 0d       	add	r25, r0
    14a0:	a4 9f       	mul	r26, r20
    14a2:	80 0d       	add	r24, r0
    14a4:	91 1d       	adc	r25, r1
    14a6:	11 24       	eor	r1, r1
    14a8:	08 95       	ret

000014aa <__udivmodsi4>:
    14aa:	a1 e2       	ldi	r26, 0x21	; 33
    14ac:	1a 2e       	mov	r1, r26
    14ae:	aa 1b       	sub	r26, r26
    14b0:	bb 1b       	sub	r27, r27
    14b2:	fd 01       	movw	r30, r26
    14b4:	0d c0       	rjmp	.+26     	; 0x14d0 <__udivmodsi4_ep>

000014b6 <__udivmodsi4_loop>:
    14b6:	aa 1f       	adc	r26, r26
    14b8:	bb 1f       	adc	r27, r27
    14ba:	ee 1f       	adc	r30, r30
    14bc:	ff 1f       	adc	r31, r31
    14be:	a2 17       	cp	r26, r18
    14c0:	b3 07       	cpc	r27, r19
    14c2:	e4 07       	cpc	r30, r20
    14c4:	f5 07       	cpc	r31, r21
    14c6:	20 f0       	brcs	.+8      	; 0x14d0 <__udivmodsi4_ep>
    14c8:	a2 1b       	sub	r26, r18
    14ca:	b3 0b       	sbc	r27, r19
    14cc:	e4 0b       	sbc	r30, r20
    14ce:	f5 0b       	sbc	r31, r21

000014d0 <__udivmodsi4_ep>:
    14d0:	66 1f       	adc	r22, r22
    14d2:	77 1f       	adc	r23, r23
    14d4:	88 1f       	adc	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	1a 94       	dec	r1
    14da:	69 f7       	brne	.-38     	; 0x14b6 <__udivmodsi4_loop>
    14dc:	60 95       	com	r22
    14de:	70 95       	com	r23
    14e0:	80 95       	com	r24
    14e2:	90 95       	com	r25
    14e4:	9b 01       	movw	r18, r22
    14e6:	ac 01       	movw	r20, r24
    14e8:	bd 01       	movw	r22, r26
    14ea:	cf 01       	movw	r24, r30
    14ec:	08 95       	ret

000014ee <_exit>:
    14ee:	f8 94       	cli

000014f0 <__stop_program>:
    14f0:	ff cf       	rjmp	.-2      	; 0x14f0 <__stop_program>
